{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/cactus-dark-custom/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/images/apple-touch-icon.png.bak","path":"images/apple-touch-icon.png.bak","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/images/favicon-192x192.png.bak","path":"images/favicon-192x192.png.bak","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/images/favicon.ico.bak","path":"images/favicon.ico.bak","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/images/logo.png.bak","path":"images/logo.png.bak","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/lib/justified-gallery/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/lib/justified-gallery/justifiedGallery.min.css","path":"lib/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/lib/meslo-LG/styles.css","path":"lib/meslo-LG/styles.css","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/lib/meslo-LG/fonts/MesloLGL-Italic.ttf","path":"lib/meslo-LG/fonts/MesloLGL-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/lib/meslo-LG/fonts/MesloLGM-Bold.ttf","path":"lib/meslo-LG/fonts/MesloLGM-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/lib/meslo-LG/fonts/MesloLGL-Regular.ttf","path":"lib/meslo-LG/fonts/MesloLGL-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/lib/meslo-LG/fonts/MesloLGM-Italic.ttf","path":"lib/meslo-LG/fonts/MesloLGM-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/lib/meslo-LG/fonts/MesloLGS-Italic.ttf","path":"lib/meslo-LG/fonts/MesloLGS-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/lib/meslo-LG/fonts/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/fonts/MesloLGM-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/lib/meslo-LG/fonts/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/fonts/MesloLGL-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/lib/meslo-LG/fonts/MesloLGL-Bold.ttf","path":"lib/meslo-LG/fonts/MesloLGL-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/lib/meslo-LG/fonts/MesloLGS-Bold.ttf","path":"lib/meslo-LG/fonts/MesloLGS-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/lib/meslo-LG/fonts/MesloLGS-Regular.ttf","path":"lib/meslo-LG/fonts/MesloLGS-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/lib/meslo-LG/fonts/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/fonts/MesloLGS-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark-custom/source/lib/meslo-LG/fonts/MesloLGM-Regular.ttf","path":"lib/meslo-LG/fonts/MesloLGM-Regular.ttf","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Happy-git-Trees.md","hash":"cec57655cd6311eac1b7aa8fd6151584d927ad87","modified":1525350972668},{"_id":"source/_posts/Improvements-to-BigVimbox-com.md","hash":"20b3d0f7569093124d0692901bd86379dc5aa67c","modified":1525350972668},{"_id":"themes/cactus-dark-custom/_config.yml","hash":"f3533038fdd43ac4874e83552a096d486db421d2","modified":1525350972669},{"_id":"source/CNAME","hash":"699ed802fce39bc5b8ca0315a214a45992bb759b","modified":1525350972668},{"_id":"source/_posts/Ruby-on-Rails-polymorphic-user-model-with-devise-authentication.md","hash":"eef190d248b20dff58a763731f93e789b753ae2f","modified":1525350972669},{"_id":"source/_posts/donut-recipe.md","hash":"fc63920ed6e4eaff15d64cf5c80bae3acfa4cfbd","modified":1587387347853},{"_id":"source/_posts/Running-Heroku-shell-commands-from-a-Rake-task.md","hash":"678bb5da330acecfc400494280bf5fa0d415d143","modified":1525350972669},{"_id":"source/about/index.md","hash":"0257c5b02625bf5f1ebbe38c5028568a5389c6ba","modified":1525350972669},{"_id":"themes/cactus-dark-custom/layout/archive.ejs","hash":"f9c0434f023bdf2858aa8447137463c3224814be","modified":1525350972671},{"_id":"themes/cactus-dark-custom/layout/index.ejs","hash":"c452d363f2c630c55f65bc9ef94ceae36c9c0017","modified":1525350972671},{"_id":"source/_posts/On-Code-Cleanliness-and-Readability.md","hash":"4a4de89414865585db3d2b30b079be9a658dc7db","modified":1525350972669},{"_id":"themes/cactus-dark-custom/layout/layout.ejs","hash":"d34f468113a3e3377409fa21f88fef3462a57f00","modified":1525350972671},{"_id":"themes/cactus-dark-custom/layout/page.ejs","hash":"b6b7b1e6dc856a0e62f35da0151f67ba41143e04","modified":1525350972671},{"_id":"themes/cactus-dark-custom/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1525350972672},{"_id":"themes/cactus-dark-custom/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1525350972672},{"_id":"themes/cactus-dark-custom/layout/post.ejs","hash":"2731e597b5d1714a6f5a775c432e99785f02a3e3","modified":1525350972671},{"_id":"themes/cactus-dark-custom/layout/_partial/comments.ejs","hash":"853a4500da515ef3facc51a055886eaf8efd080d","modified":1525350972670},{"_id":"themes/cactus-dark-custom/layout/_partial/footer.ejs","hash":"7f6b3f126a58e6734b658ab57bc6b41822bc9342","modified":1525350972670},{"_id":"themes/cactus-dark-custom/layout/_partial/header.ejs","hash":"889fe54bbfd1fb3357e8c0614d57a437a72f782a","modified":1525350972670},{"_id":"themes/cactus-dark-custom/layout/_partial/head.ejs","hash":"5b6f73a4fb96edde3005f90063509bf851714f72","modified":1525350972670},{"_id":"themes/cactus-dark-custom/layout/_partial/scripts.ejs","hash":"264e49c76744a2ce5be4cd69910cab8e0f517eda","modified":1525350972671},{"_id":"themes/cactus-dark-custom/source/js/main.js","hash":"84de9c1a8a4a82b9446163c47b89937f44a7dee0","modified":1525350972680},{"_id":"themes/cactus-dark-custom/source/images/apple-touch-icon.png","hash":"7557e07a0a6bc5b0c715506d7051e72dd3bcf934","modified":1525350972678},{"_id":"themes/cactus-dark-custom/source/images/favicon-192x192.png","hash":"7557e07a0a6bc5b0c715506d7051e72dd3bcf934","modified":1525350972679},{"_id":"themes/cactus-dark-custom/source/images/apple-touch-icon.png.bak","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1525350972679},{"_id":"themes/cactus-dark-custom/source/images/favicon.ico","hash":"7557e07a0a6bc5b0c715506d7051e72dd3bcf934","modified":1525350972679},{"_id":"themes/cactus-dark-custom/source/images/favicon-192x192.png.bak","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1525350972679},{"_id":"themes/cactus-dark-custom/source/images/favicon.ico.bak","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1525350972680},{"_id":"themes/cactus-dark-custom/source/images/logo.png","hash":"f2ecd01786e56bfc1be31a16a30feef3862f8c75","modified":1525350972680},{"_id":"themes/cactus-dark-custom/source/images/logo.png.bak","hash":"199750f3a39251ca97d36ed8317d88dfdc2dfe66","modified":1525350972680},{"_id":"themes/cactus-dark-custom/source/css/_extend.styl","hash":"faca25132d55e8989d1c1d638e55d1e97de3c561","modified":1525350972672},{"_id":"themes/cactus-dark-custom/source/css/_mixins.styl","hash":"c921ceb620deedddd38c9cec28190995e8764bab","modified":1525350972677},{"_id":"themes/cactus-dark-custom/source/css/_util.styl","hash":"f8e286a21c7ec3e771d5ddeb2909ac92390af9bd","modified":1525350972678},{"_id":"themes/cactus-dark-custom/source/css/_variables.styl","hash":"80345f77f0e601669047cbb3c44491720c3b5c13","modified":1525350972678},{"_id":"themes/cactus-dark-custom/source/css/style.styl","hash":"fbe1574bfa9b830345f95c50de1e4e2af0eed9c2","modified":1525350972678},{"_id":"themes/cactus-dark-custom/source/css/_partial/archive.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1525350972677},{"_id":"themes/cactus-dark-custom/layout/_partial/post/actions_desktop.ejs","hash":"2319dea76f205c27dd59c994921f66350df8027a","modified":1525350972670},{"_id":"themes/cactus-dark-custom/layout/_partial/post/actions_mobile.ejs","hash":"e7638a83e5aaa4bf5b24440ca76fec8eb563bed7","modified":1525350972670},{"_id":"themes/cactus-dark-custom/layout/_partial/post/date.ejs","hash":"12a4a7ba6334e3e5c03d9a9601d7779a27c2e082","modified":1525350972670},{"_id":"themes/cactus-dark-custom/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1525350972670},{"_id":"themes/cactus-dark-custom/layout/_partial/post/share.ejs","hash":"25a3406f97e976ec13239f0d3f32f9e512511f50","modified":1525350972671},{"_id":"themes/cactus-dark-custom/layout/_partial/post/tag.ejs","hash":"bfab03ef986d35ccad583f2d2b575db4a8d2789e","modified":1525350972671},{"_id":"themes/cactus-dark-custom/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1525350972671},{"_id":"themes/cactus-dark-custom/source/lib/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1525350972684},{"_id":"themes/cactus-dark-custom/source/lib/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1525350972684},{"_id":"themes/cactus-dark-custom/source/lib/meslo-LG/styles.css","hash":"eb88d0b9f1bbef99070e9627e2c96d892036bf7e","modified":1525350972697},{"_id":"themes/cactus-dark-custom/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1525350972672},{"_id":"themes/cactus-dark-custom/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1525350972672},{"_id":"themes/cactus-dark-custom/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1525350972673},{"_id":"themes/cactus-dark-custom/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1525350972672},{"_id":"themes/cactus-dark-custom/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1525350972673},{"_id":"themes/cactus-dark-custom/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1525350972673},{"_id":"themes/cactus-dark-custom/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1525350972673},{"_id":"themes/cactus-dark-custom/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1525350972673},{"_id":"themes/cactus-dark-custom/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1525350972673},{"_id":"themes/cactus-dark-custom/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1525350972673},{"_id":"themes/cactus-dark-custom/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1525350972674},{"_id":"themes/cactus-dark-custom/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1525350972674},{"_id":"themes/cactus-dark-custom/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1525350972673},{"_id":"themes/cactus-dark-custom/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1525350972674},{"_id":"themes/cactus-dark-custom/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1525350972674},{"_id":"themes/cactus-dark-custom/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1525350972674},{"_id":"themes/cactus-dark-custom/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1525350972674},{"_id":"themes/cactus-dark-custom/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1525350972674},{"_id":"themes/cactus-dark-custom/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1525350972674},{"_id":"themes/cactus-dark-custom/source/css/_highlight/kimbie.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1525350972675},{"_id":"themes/cactus-dark-custom/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1525350972675},{"_id":"themes/cactus-dark-custom/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1525350972675},{"_id":"themes/cactus-dark-custom/source/css/_highlight/paraiso.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1525350972675},{"_id":"themes/cactus-dark-custom/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1525350972675},{"_id":"themes/cactus-dark-custom/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1525350972675},{"_id":"themes/cactus-dark-custom/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1525350972675},{"_id":"themes/cactus-dark-custom/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1525350972676},{"_id":"themes/cactus-dark-custom/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1525350972676},{"_id":"themes/cactus-dark-custom/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1525350972676},{"_id":"themes/cactus-dark-custom/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1525350972676},{"_id":"themes/cactus-dark-custom/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1525350972676},{"_id":"themes/cactus-dark-custom/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1525350972676},{"_id":"themes/cactus-dark-custom/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1525350972676},{"_id":"themes/cactus-dark-custom/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1525350972676},{"_id":"themes/cactus-dark-custom/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1525350972677},{"_id":"themes/cactus-dark-custom/source/css/_partial/comments.styl","hash":"11fb41241a13971d23fc3f7e6d60315c7f248396","modified":1525350972677},{"_id":"themes/cactus-dark-custom/source/css/_partial/article.styl","hash":"202b775a966d7bc35bf5adc693b62463dec106bb","modified":1525350972677},{"_id":"themes/cactus-dark-custom/source/css/_partial/header.styl","hash":"63707d9103a283147ca222fd6f8ff9bffbffe427","modified":1525350972677},{"_id":"themes/cactus-dark-custom/source/css/_partial/index.styl","hash":"cf43702450ea1e5617541501886982a394cff8ec","modified":1525350972677},{"_id":"themes/cactus-dark-custom/source/css/_partial/footer.styl","hash":"b7570de60eaf9aa6b0192bf9c71b9172ff11bfbc","modified":1525350972677},{"_id":"themes/cactus-dark-custom/source/lib/jquery/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1525350972684},{"_id":"themes/cactus-dark-custom/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1525350972681},{"_id":"themes/cactus-dark-custom/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1525350972681},{"_id":"themes/cactus-dark-custom/source/css/_partial/post/actions_desktop.styl","hash":"969d849434d3fc519629e5de001d9a091e7584ec","modified":1525350972678},{"_id":"themes/cactus-dark-custom/source/css/_partial/post/actions_mobile.styl","hash":"5911f4674eb90339c3d2db810f9c22a7fb65584e","modified":1525350972678},{"_id":"themes/cactus-dark-custom/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1525350972681},{"_id":"themes/cactus-dark-custom/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1525350972681},{"_id":"themes/cactus-dark-custom/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1525350972683},{"_id":"themes/cactus-dark-custom/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1525350972683},{"_id":"themes/cactus-dark-custom/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1525350972682},{"_id":"themes/cactus-dark-custom/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1525350972682},{"_id":"themes/cactus-dark-custom/source/lib/meslo-LG/fonts/MesloLGL-Italic.ttf","hash":"96c97a0a098ca40802f948ae56fa37aa6683d034","modified":1525350972687},{"_id":"themes/cactus-dark-custom/source/lib/meslo-LG/fonts/MesloLGM-Bold.ttf","hash":"a8a8df3393bccc365335fc5eb0a62a6b7ccd32b9","modified":1525350972690},{"_id":"themes/cactus-dark-custom/source/lib/meslo-LG/fonts/MesloLGL-Regular.ttf","hash":"2b912dd13f052f645ee19951604610bb350d50af","modified":1525350972688},{"_id":"themes/cactus-dark-custom/source/lib/meslo-LG/fonts/MesloLGM-Italic.ttf","hash":"68700db02debd4b922304134da83b829cbfddfc9","modified":1525350972692},{"_id":"themes/cactus-dark-custom/source/lib/meslo-LG/fonts/MesloLGS-Italic.ttf","hash":"7f7cdbdcc26279c04046632e22d872f111bc9399","modified":1525350972696},{"_id":"themes/cactus-dark-custom/source/lib/meslo-LG/fonts/MesloLGM-BoldItalic.ttf","hash":"65ddb11e75ee93909e845ab912a36717c48f1c94","modified":1525350972691},{"_id":"themes/cactus-dark-custom/source/lib/meslo-LG/fonts/MesloLGL-BoldItalic.ttf","hash":"a9a431fc7a6c3a67c98021d4035c12a07a4f1070","modified":1525350972686},{"_id":"themes/cactus-dark-custom/source/lib/meslo-LG/fonts/MesloLGL-Bold.ttf","hash":"bfa1ed9a263ed78462f06d322de13bd5bd0906b2","modified":1525350972685},{"_id":"themes/cactus-dark-custom/source/lib/meslo-LG/fonts/MesloLGS-Bold.ttf","hash":"df202ce09cbdc70bc16b81983a13ef0f94e46f10","modified":1525350972694},{"_id":"themes/cactus-dark-custom/source/lib/meslo-LG/fonts/MesloLGS-Regular.ttf","hash":"56fa0e33a390b704afc56af93a31576ccdbbdd9e","modified":1525350972697},{"_id":"themes/cactus-dark-custom/source/lib/meslo-LG/fonts/MesloLGS-BoldItalic.ttf","hash":"d895a1bd25e36c58b7f463ebe14de09f186d5ab4","modified":1525350972695},{"_id":"themes/cactus-dark-custom/source/lib/meslo-LG/fonts/MesloLGM-Regular.ttf","hash":"5e220152adefe905b2197f873d7cee99eca50e91","modified":1525350972693},{"_id":"public/about/index.html","hash":"2a58198b621cd14499c3cdd47da6654f1d328f5a","modified":1587387251345},{"_id":"public/Improvements-to-BigVimbox-com/index.html","hash":"b439e4160ee807b1f35bf35341cf6c6e4c27371e","modified":1587387251352},{"_id":"public/archives/index.html","hash":"9c733e6af9fe626d414c46a6e11109d811ba422e","modified":1587387358876},{"_id":"public/archives/2014/index.html","hash":"1643e82df11cc1c015e1626730ec1b6ba049dbb0","modified":1587387251354},{"_id":"public/archives/2014/06/index.html","hash":"941c5c643ad3fe6ab1f92eacc5ba8132bdc7f008","modified":1587387251354},{"_id":"public/archives/2014/10/index.html","hash":"39f79476e29405fcf3a34e60bf0582ee734439cb","modified":1587387251354},{"_id":"public/archives/2014/12/index.html","hash":"d7e229f4864eed622fa3c406663573f127a2811a","modified":1587387251354},{"_id":"public/archives/2015/index.html","hash":"25130350de70d394d8683d5ee61865dfe3dfe9ec","modified":1587387251354},{"_id":"public/archives/2015/09/index.html","hash":"5ff1b5688699e30a2c8b4ff751090508d4534922","modified":1587387251354},{"_id":"public/Happy-git-Trees/index.html","hash":"f78fcffd0cc88b0cc2fd1b2f8d0c29b82ccd484b","modified":1587387251354},{"_id":"public/On-Code-Cleanliness-and-Readability/index.html","hash":"742107cc6a27bc50dfb1ab323cec558071d944e2","modified":1587387251354},{"_id":"public/Running-Heroku-shell-commands-from-a-Rake-task/index.html","hash":"d15b480b4afd3538f3d7e7c222657a1248ed3d2c","modified":1587387251354},{"_id":"public/Ruby-on-Rails-polymorphic-user-model-with-devise-authentication/index.html","hash":"9052cf8fc18288b62c465cedee35cd3b144fc259","modified":1587387251355},{"_id":"public/index.html","hash":"4fdecb55477607f9519e5cbb2285870349d24c75","modified":1587387358876},{"_id":"public/donut-recipe/index.html","hash":"0fe39ebe6762012d303ac706f0c0126c62cb9fa8","modified":1587387358877},{"_id":"public/archives/2020/index.html","hash":"6f00057dbe60eba1826bbcabfede3006e04dd4d5","modified":1587387358877},{"_id":"public/archives/2020/04/index.html","hash":"6f4f8371004b79e8efe23787552e52b9f9df1307","modified":1587387358877},{"_id":"public/CNAME","hash":"699ed802fce39bc5b8ca0315a214a45992bb759b","modified":1587387251369},{"_id":"public/images/apple-touch-icon.png","hash":"7557e07a0a6bc5b0c715506d7051e72dd3bcf934","modified":1587387251369},{"_id":"public/images/favicon-192x192.png","hash":"7557e07a0a6bc5b0c715506d7051e72dd3bcf934","modified":1587387251369},{"_id":"public/images/favicon.ico","hash":"7557e07a0a6bc5b0c715506d7051e72dd3bcf934","modified":1587387251369},{"_id":"public/images/favicon-192x192.png.bak","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1587387251369},{"_id":"public/images/logo.png","hash":"f2ecd01786e56bfc1be31a16a30feef3862f8c75","modified":1587387251369},{"_id":"public/images/apple-touch-icon.png.bak","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1587387251665},{"_id":"public/images/favicon.ico.bak","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1587387251666},{"_id":"public/images/logo.png.bak","hash":"199750f3a39251ca97d36ed8317d88dfdc2dfe66","modified":1587387251667},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1587387251667},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1587387251667},{"_id":"public/js/main.js","hash":"84de9c1a8a4a82b9446163c47b89937f44a7dee0","modified":1587387251671},{"_id":"public/lib/meslo-LG/styles.css","hash":"eb88d0b9f1bbef99070e9627e2c96d892036bf7e","modified":1587387251671},{"_id":"public/lib/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1587387251671},{"_id":"public/lib/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1587387251672},{"_id":"public/css/style.css","hash":"84fe04fe49141d5f7628656c2e5713c023d1ceea","modified":1587387251672},{"_id":"public/lib/jquery/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1587387251672},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1587387251672},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1587387251673},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1587387251673},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1587387251673},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1587387251679},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1587387251688},{"_id":"public/lib/meslo-LG/fonts/MesloLGM-Italic.ttf","hash":"68700db02debd4b922304134da83b829cbfddfc9","modified":1587387251693},{"_id":"public/lib/meslo-LG/fonts/MesloLGL-Italic.ttf","hash":"96c97a0a098ca40802f948ae56fa37aa6683d034","modified":1587387251695},{"_id":"public/lib/meslo-LG/fonts/MesloLGM-BoldItalic.ttf","hash":"65ddb11e75ee93909e845ab912a36717c48f1c94","modified":1587387251695},{"_id":"public/lib/meslo-LG/fonts/MesloLGL-Regular.ttf","hash":"2b912dd13f052f645ee19951604610bb350d50af","modified":1587387251696},{"_id":"public/lib/meslo-LG/fonts/MesloLGL-BoldItalic.ttf","hash":"a9a431fc7a6c3a67c98021d4035c12a07a4f1070","modified":1587387251696},{"_id":"public/lib/meslo-LG/fonts/MesloLGL-Bold.ttf","hash":"bfa1ed9a263ed78462f06d322de13bd5bd0906b2","modified":1587387251697},{"_id":"public/lib/meslo-LG/fonts/MesloLGS-Bold.ttf","hash":"df202ce09cbdc70bc16b81983a13ef0f94e46f10","modified":1587387251697},{"_id":"public/lib/meslo-LG/fonts/MesloLGS-Regular.ttf","hash":"56fa0e33a390b704afc56af93a31576ccdbbdd9e","modified":1587387251698},{"_id":"public/lib/meslo-LG/fonts/MesloLGS-BoldItalic.ttf","hash":"d895a1bd25e36c58b7f463ebe14de09f186d5ab4","modified":1587387251698},{"_id":"public/lib/meslo-LG/fonts/MesloLGM-Regular.ttf","hash":"5e220152adefe905b2197f873d7cee99eca50e91","modified":1587387251700},{"_id":"public/lib/meslo-LG/fonts/MesloLGS-Italic.ttf","hash":"7f7cdbdcc26279c04046632e22d872f111bc9399","modified":1587387251700},{"_id":"public/lib/meslo-LG/fonts/MesloLGM-Bold.ttf","hash":"a8a8df3393bccc365335fc5eb0a62a6b7ccd32b9","modified":1587387251704}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2017-01-06T14:58:24.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-01-06 09:58:24\n---\n","updated":"2018-05-03T12:36:12.669Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck98hdtsi00012umlche5ximk","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Happy (git) Trees","date":"2014-12-04T14:12:06.000Z","_content":"\n_originally posted on the Intridea blog here: http://www.intridea.com/blog/2014/12/4/happy-git-trees_\n\n![Bob Ross](http://3.bp.blogspot.com/-euwIyl4tzDE/UjYU3GBaLgI/AAAAAAAAAQo/3V1b37kuISI/s1600/o-BOB-ROSS-facebook.jpg)\n\n<br>We all know Bob Ross (above) and his fascination with \"Happy Little Trees\" (or maybe that's my fascination). In any case, we can all take some advice from Bob and keep our Git trees happy.\n\nIf you took a look at your current project's git tree (through a tool maybe like [Gitx](http://gitx.frim.nl/)) I bet it would look something like this: \n\n![Git tree](https://i.stack.imgur.com/r1wP7.png)\n\nNow I don't know about you, but that is really hard for me to follow. I can get the general picture, that there are some branches that merged back into master, but then there's some branching off of branches and merges between branches; I can't really tell what story the git tree is trying to tell.\n\n#### Why do we care about \"Happy Trees\"?\n\nIt is my view of git that all of your commits should tell a story of new functionality. This lets your coworkers or, as in the case of Intridea, clients see very plainly the set of commits that led to a feature being added to the application. It potentially lets less experienced developers see what steps you took to add a feature, and shows your train of thought on how you went from 0 to feature (hero).\n\nEssentially, keeping a happy and clean git tree is about communication.\n\n#### What does a Happy (git) tree look like?\n\nGreat question! Everyone has their own opinions on what a happy and clean git tree looks like (well, some have no opinion at all); this is my opinion on what a happy and clean tree might look like:\n\n![Happy (git) Tree](https://dl.dropboxusercontent.com/u/539427/Screenshot%202014-11-20%2014.59.44.png)\n\nI created this by just initializing a blank git repository and making some commits on master and two different branches. As you can see, it's clearly communicated what work occured on the branch and what commits happened directly on master. This makes it very easy to track down a potential bug, and which commit or merge may have caused it. Also, this makes it very easy to revert an entire feature should it no longer be wanted or if it's causing bugs. All you need to do is revert the merge commit and like magic, the feature is gone.\n\n#### How do 'I' make my own Happy (git) trees?\n\nAnother AMAZING question! You too can have happy little (git) trees, just follow the guidelines below:\n\n- If you are working on a feature that takes more than one commit to implement (you are keeping small commits, right?), make a git branch `git checkout -b <branch_name>` and do all of your coding on there.\n- Before you are ready to merge it back into master, rebase it off of master `git fetch && git rebase origin/master`. \n  - Essentially what a rebase does (if you do not already know) is rewrite your branch's git history by removing your commits, updating your branch so that it's the same as `master` then replaying your commits one at a time on top of the new `HEAD`. **Note:** For a more complete visual explanation of `git rebase` please see [this](http://git-scm.com/book/en/v2/Git-Branching-Rebasing).\n- When you are ready to merge your feature branch back into `master`, you can check out master `git checkout master`, update master via `git rebase origin/master`, and merge your branch using the \"no fast forward\" option `git merge --no-ff <branch_name>`\n  - What the `--no-ff` option does is not replay your commits back onto master, but instead makes a merge commit of all the changes in your branch (_It should be noted that this is what a GitHub Pull-request does_) \n\n#### A bit more about `git rebase` and conflicts\n\nOften, if you are working on a team, you will have conflicts when you rebase your branch from `master`. This is fine--do not panic--it just means that another person updated the same code you did and merged it in before you. What will happen then is the rebase will stop in the middle and you will have to manually fix the conflicts. If you type in `git status` it will show you which files have conflicts, you can simply open them and see which changes you made that are in conflict with the changes on master (which will be denoted with `<<<<<<` and `========`), then add or delete the code necessary to incorporate both changes in the code (if necessary). Once you are done fixing the conflicts (this includes deleting the `<<<<` and `====` mark up), go back to the command line and type `git add .` then `git rebase --continue` to continue along your path to having a happy (git) tree.\n\nIt is for this reason that if I am working on a feature branch, I rebase it after almost every commit, just to make sure I am kept up to date with `master`. I don't like fixing conflicts, and this ensures that I have as few of them as possible at one time.\n\n#### Now, a bit more about GitHub and rebasing\n\nIf you are like me, you use GitHub to store your code, and you use pull requests on GitHub to have someone review your code (you are having someone review your code, [right?](http://www.intridea.com/blog/2014/8/12/on-code-cleanliness-and-readability)). In order to take advantage of GitHub _and_ `git rebase` you will need to rebase your branches before you make a pull request, otherwise you could end up with a spaghetti like tree as shown above.\n","source":"_posts/Happy-git-Trees.md","raw":"---\ntitle: Happy (git) Trees\ndate: 2014-12-04 09:12:06\ntags:\n---\n\n_originally posted on the Intridea blog here: http://www.intridea.com/blog/2014/12/4/happy-git-trees_\n\n![Bob Ross](http://3.bp.blogspot.com/-euwIyl4tzDE/UjYU3GBaLgI/AAAAAAAAAQo/3V1b37kuISI/s1600/o-BOB-ROSS-facebook.jpg)\n\n<br>We all know Bob Ross (above) and his fascination with \"Happy Little Trees\" (or maybe that's my fascination). In any case, we can all take some advice from Bob and keep our Git trees happy.\n\nIf you took a look at your current project's git tree (through a tool maybe like [Gitx](http://gitx.frim.nl/)) I bet it would look something like this: \n\n![Git tree](https://i.stack.imgur.com/r1wP7.png)\n\nNow I don't know about you, but that is really hard for me to follow. I can get the general picture, that there are some branches that merged back into master, but then there's some branching off of branches and merges between branches; I can't really tell what story the git tree is trying to tell.\n\n#### Why do we care about \"Happy Trees\"?\n\nIt is my view of git that all of your commits should tell a story of new functionality. This lets your coworkers or, as in the case of Intridea, clients see very plainly the set of commits that led to a feature being added to the application. It potentially lets less experienced developers see what steps you took to add a feature, and shows your train of thought on how you went from 0 to feature (hero).\n\nEssentially, keeping a happy and clean git tree is about communication.\n\n#### What does a Happy (git) tree look like?\n\nGreat question! Everyone has their own opinions on what a happy and clean git tree looks like (well, some have no opinion at all); this is my opinion on what a happy and clean tree might look like:\n\n![Happy (git) Tree](https://dl.dropboxusercontent.com/u/539427/Screenshot%202014-11-20%2014.59.44.png)\n\nI created this by just initializing a blank git repository and making some commits on master and two different branches. As you can see, it's clearly communicated what work occured on the branch and what commits happened directly on master. This makes it very easy to track down a potential bug, and which commit or merge may have caused it. Also, this makes it very easy to revert an entire feature should it no longer be wanted or if it's causing bugs. All you need to do is revert the merge commit and like magic, the feature is gone.\n\n#### How do 'I' make my own Happy (git) trees?\n\nAnother AMAZING question! You too can have happy little (git) trees, just follow the guidelines below:\n\n- If you are working on a feature that takes more than one commit to implement (you are keeping small commits, right?), make a git branch `git checkout -b <branch_name>` and do all of your coding on there.\n- Before you are ready to merge it back into master, rebase it off of master `git fetch && git rebase origin/master`. \n  - Essentially what a rebase does (if you do not already know) is rewrite your branch's git history by removing your commits, updating your branch so that it's the same as `master` then replaying your commits one at a time on top of the new `HEAD`. **Note:** For a more complete visual explanation of `git rebase` please see [this](http://git-scm.com/book/en/v2/Git-Branching-Rebasing).\n- When you are ready to merge your feature branch back into `master`, you can check out master `git checkout master`, update master via `git rebase origin/master`, and merge your branch using the \"no fast forward\" option `git merge --no-ff <branch_name>`\n  - What the `--no-ff` option does is not replay your commits back onto master, but instead makes a merge commit of all the changes in your branch (_It should be noted that this is what a GitHub Pull-request does_) \n\n#### A bit more about `git rebase` and conflicts\n\nOften, if you are working on a team, you will have conflicts when you rebase your branch from `master`. This is fine--do not panic--it just means that another person updated the same code you did and merged it in before you. What will happen then is the rebase will stop in the middle and you will have to manually fix the conflicts. If you type in `git status` it will show you which files have conflicts, you can simply open them and see which changes you made that are in conflict with the changes on master (which will be denoted with `<<<<<<` and `========`), then add or delete the code necessary to incorporate both changes in the code (if necessary). Once you are done fixing the conflicts (this includes deleting the `<<<<` and `====` mark up), go back to the command line and type `git add .` then `git rebase --continue` to continue along your path to having a happy (git) tree.\n\nIt is for this reason that if I am working on a feature branch, I rebase it after almost every commit, just to make sure I am kept up to date with `master`. I don't like fixing conflicts, and this ensures that I have as few of them as possible at one time.\n\n#### Now, a bit more about GitHub and rebasing\n\nIf you are like me, you use GitHub to store your code, and you use pull requests on GitHub to have someone review your code (you are having someone review your code, [right?](http://www.intridea.com/blog/2014/8/12/on-code-cleanliness-and-readability)). In order to take advantage of GitHub _and_ `git rebase` you will need to rebase your branches before you make a pull request, otherwise you could end up with a spaghetti like tree as shown above.\n","slug":"Happy-git-Trees","published":1,"updated":"2018-05-03T12:36:12.668Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck98hdtsf00002umliqxt0rfz","content":"<p><em>originally posted on the Intridea blog here: <a href=\"http://www.intridea.com/blog/2014/12/4/happy-git-trees\" target=\"_blank\" rel=\"noopener\">http://www.intridea.com/blog/2014/12/4/happy-git-trees</a></em></p>\n<p><img src=\"http://3.bp.blogspot.com/-euwIyl4tzDE/UjYU3GBaLgI/AAAAAAAAAQo/3V1b37kuISI/s1600/o-BOB-ROSS-facebook.jpg\" alt=\"Bob Ross\"></p>\n<p><br>We all know Bob Ross (above) and his fascination with “Happy Little Trees” (or maybe that’s my fascination). In any case, we can all take some advice from Bob and keep our Git trees happy.</p>\n<p>If you took a look at your current project’s git tree (through a tool maybe like <a href=\"http://gitx.frim.nl/\" target=\"_blank\" rel=\"noopener\">Gitx</a>) I bet it would look something like this: </p>\n<p><img src=\"https://i.stack.imgur.com/r1wP7.png\" alt=\"Git tree\"></p>\n<p>Now I don’t know about you, but that is really hard for me to follow. I can get the general picture, that there are some branches that merged back into master, but then there’s some branching off of branches and merges between branches; I can’t really tell what story the git tree is trying to tell.</p>\n<h4 id=\"Why-do-we-care-about-“Happy-Trees”\"><a href=\"#Why-do-we-care-about-“Happy-Trees”\" class=\"headerlink\" title=\"Why do we care about “Happy Trees”?\"></a>Why do we care about “Happy Trees”?</h4><p>It is my view of git that all of your commits should tell a story of new functionality. This lets your coworkers or, as in the case of Intridea, clients see very plainly the set of commits that led to a feature being added to the application. It potentially lets less experienced developers see what steps you took to add a feature, and shows your train of thought on how you went from 0 to feature (hero).</p>\n<p>Essentially, keeping a happy and clean git tree is about communication.</p>\n<h4 id=\"What-does-a-Happy-git-tree-look-like\"><a href=\"#What-does-a-Happy-git-tree-look-like\" class=\"headerlink\" title=\"What does a Happy (git) tree look like?\"></a>What does a Happy (git) tree look like?</h4><p>Great question! Everyone has their own opinions on what a happy and clean git tree looks like (well, some have no opinion at all); this is my opinion on what a happy and clean tree might look like:</p>\n<p><img src=\"https://dl.dropboxusercontent.com/u/539427/Screenshot%202014-11-20%2014.59.44.png\" alt=\"Happy (git) Tree\"></p>\n<p>I created this by just initializing a blank git repository and making some commits on master and two different branches. As you can see, it’s clearly communicated what work occured on the branch and what commits happened directly on master. This makes it very easy to track down a potential bug, and which commit or merge may have caused it. Also, this makes it very easy to revert an entire feature should it no longer be wanted or if it’s causing bugs. All you need to do is revert the merge commit and like magic, the feature is gone.</p>\n<h4 id=\"How-do-‘I’-make-my-own-Happy-git-trees\"><a href=\"#How-do-‘I’-make-my-own-Happy-git-trees\" class=\"headerlink\" title=\"How do ‘I’ make my own Happy (git) trees?\"></a>How do ‘I’ make my own Happy (git) trees?</h4><p>Another AMAZING question! You too can have happy little (git) trees, just follow the guidelines below:</p>\n<ul>\n<li>If you are working on a feature that takes more than one commit to implement (you are keeping small commits, right?), make a git branch <code>git checkout -b &lt;branch_name&gt;</code> and do all of your coding on there.</li>\n<li>Before you are ready to merge it back into master, rebase it off of master <code>git fetch &amp;&amp; git rebase origin/master</code>. <ul>\n<li>Essentially what a rebase does (if you do not already know) is rewrite your branch’s git history by removing your commits, updating your branch so that it’s the same as <code>master</code> then replaying your commits one at a time on top of the new <code>HEAD</code>. <strong>Note:</strong> For a more complete visual explanation of <code>git rebase</code> please see <a href=\"http://git-scm.com/book/en/v2/Git-Branching-Rebasing\" target=\"_blank\" rel=\"noopener\">this</a>.</li>\n</ul>\n</li>\n<li>When you are ready to merge your feature branch back into <code>master</code>, you can check out master <code>git checkout master</code>, update master via <code>git rebase origin/master</code>, and merge your branch using the “no fast forward” option <code>git merge --no-ff &lt;branch_name&gt;</code><ul>\n<li>What the <code>--no-ff</code> option does is not replay your commits back onto master, but instead makes a merge commit of all the changes in your branch (<em>It should be noted that this is what a GitHub Pull-request does</em>) </li>\n</ul>\n</li>\n</ul>\n<h4 id=\"A-bit-more-about-git-rebase-and-conflicts\"><a href=\"#A-bit-more-about-git-rebase-and-conflicts\" class=\"headerlink\" title=\"A bit more about git rebase and conflicts\"></a>A bit more about <code>git rebase</code> and conflicts</h4><p>Often, if you are working on a team, you will have conflicts when you rebase your branch from <code>master</code>. This is fine–do not panic–it just means that another person updated the same code you did and merged it in before you. What will happen then is the rebase will stop in the middle and you will have to manually fix the conflicts. If you type in <code>git status</code> it will show you which files have conflicts, you can simply open them and see which changes you made that are in conflict with the changes on master (which will be denoted with <code>&lt;&lt;&lt;&lt;&lt;&lt;</code> and <code>========</code>), then add or delete the code necessary to incorporate both changes in the code (if necessary). Once you are done fixing the conflicts (this includes deleting the <code>&lt;&lt;&lt;&lt;</code> and <code>====</code> mark up), go back to the command line and type <code>git add .</code> then <code>git rebase --continue</code> to continue along your path to having a happy (git) tree.</p>\n<p>It is for this reason that if I am working on a feature branch, I rebase it after almost every commit, just to make sure I am kept up to date with <code>master</code>. I don’t like fixing conflicts, and this ensures that I have as few of them as possible at one time.</p>\n<h4 id=\"Now-a-bit-more-about-GitHub-and-rebasing\"><a href=\"#Now-a-bit-more-about-GitHub-and-rebasing\" class=\"headerlink\" title=\"Now, a bit more about GitHub and rebasing\"></a>Now, a bit more about GitHub and rebasing</h4><p>If you are like me, you use GitHub to store your code, and you use pull requests on GitHub to have someone review your code (you are having someone review your code, <a href=\"http://www.intridea.com/blog/2014/8/12/on-code-cleanliness-and-readability\" target=\"_blank\" rel=\"noopener\">right?</a>). In order to take advantage of GitHub <em>and</em> <code>git rebase</code> you will need to rebase your branches before you make a pull request, otherwise you could end up with a spaghetti like tree as shown above.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><em>originally posted on the Intridea blog here: <a href=\"http://www.intridea.com/blog/2014/12/4/happy-git-trees\" target=\"_blank\" rel=\"noopener\">http://www.intridea.com/blog/2014/12/4/happy-git-trees</a></em></p>\n<p><img src=\"http://3.bp.blogspot.com/-euwIyl4tzDE/UjYU3GBaLgI/AAAAAAAAAQo/3V1b37kuISI/s1600/o-BOB-ROSS-facebook.jpg\" alt=\"Bob Ross\"></p>\n<p><br>We all know Bob Ross (above) and his fascination with “Happy Little Trees” (or maybe that’s my fascination). In any case, we can all take some advice from Bob and keep our Git trees happy.</p>\n<p>If you took a look at your current project’s git tree (through a tool maybe like <a href=\"http://gitx.frim.nl/\" target=\"_blank\" rel=\"noopener\">Gitx</a>) I bet it would look something like this: </p>\n<p><img src=\"https://i.stack.imgur.com/r1wP7.png\" alt=\"Git tree\"></p>\n<p>Now I don’t know about you, but that is really hard for me to follow. I can get the general picture, that there are some branches that merged back into master, but then there’s some branching off of branches and merges between branches; I can’t really tell what story the git tree is trying to tell.</p>\n<h4 id=\"Why-do-we-care-about-“Happy-Trees”\"><a href=\"#Why-do-we-care-about-“Happy-Trees”\" class=\"headerlink\" title=\"Why do we care about “Happy Trees”?\"></a>Why do we care about “Happy Trees”?</h4><p>It is my view of git that all of your commits should tell a story of new functionality. This lets your coworkers or, as in the case of Intridea, clients see very plainly the set of commits that led to a feature being added to the application. It potentially lets less experienced developers see what steps you took to add a feature, and shows your train of thought on how you went from 0 to feature (hero).</p>\n<p>Essentially, keeping a happy and clean git tree is about communication.</p>\n<h4 id=\"What-does-a-Happy-git-tree-look-like\"><a href=\"#What-does-a-Happy-git-tree-look-like\" class=\"headerlink\" title=\"What does a Happy (git) tree look like?\"></a>What does a Happy (git) tree look like?</h4><p>Great question! Everyone has their own opinions on what a happy and clean git tree looks like (well, some have no opinion at all); this is my opinion on what a happy and clean tree might look like:</p>\n<p><img src=\"https://dl.dropboxusercontent.com/u/539427/Screenshot%202014-11-20%2014.59.44.png\" alt=\"Happy (git) Tree\"></p>\n<p>I created this by just initializing a blank git repository and making some commits on master and two different branches. As you can see, it’s clearly communicated what work occured on the branch and what commits happened directly on master. This makes it very easy to track down a potential bug, and which commit or merge may have caused it. Also, this makes it very easy to revert an entire feature should it no longer be wanted or if it’s causing bugs. All you need to do is revert the merge commit and like magic, the feature is gone.</p>\n<h4 id=\"How-do-‘I’-make-my-own-Happy-git-trees\"><a href=\"#How-do-‘I’-make-my-own-Happy-git-trees\" class=\"headerlink\" title=\"How do ‘I’ make my own Happy (git) trees?\"></a>How do ‘I’ make my own Happy (git) trees?</h4><p>Another AMAZING question! You too can have happy little (git) trees, just follow the guidelines below:</p>\n<ul>\n<li>If you are working on a feature that takes more than one commit to implement (you are keeping small commits, right?), make a git branch <code>git checkout -b &lt;branch_name&gt;</code> and do all of your coding on there.</li>\n<li>Before you are ready to merge it back into master, rebase it off of master <code>git fetch &amp;&amp; git rebase origin/master</code>. <ul>\n<li>Essentially what a rebase does (if you do not already know) is rewrite your branch’s git history by removing your commits, updating your branch so that it’s the same as <code>master</code> then replaying your commits one at a time on top of the new <code>HEAD</code>. <strong>Note:</strong> For a more complete visual explanation of <code>git rebase</code> please see <a href=\"http://git-scm.com/book/en/v2/Git-Branching-Rebasing\" target=\"_blank\" rel=\"noopener\">this</a>.</li>\n</ul>\n</li>\n<li>When you are ready to merge your feature branch back into <code>master</code>, you can check out master <code>git checkout master</code>, update master via <code>git rebase origin/master</code>, and merge your branch using the “no fast forward” option <code>git merge --no-ff &lt;branch_name&gt;</code><ul>\n<li>What the <code>--no-ff</code> option does is not replay your commits back onto master, but instead makes a merge commit of all the changes in your branch (<em>It should be noted that this is what a GitHub Pull-request does</em>) </li>\n</ul>\n</li>\n</ul>\n<h4 id=\"A-bit-more-about-git-rebase-and-conflicts\"><a href=\"#A-bit-more-about-git-rebase-and-conflicts\" class=\"headerlink\" title=\"A bit more about git rebase and conflicts\"></a>A bit more about <code>git rebase</code> and conflicts</h4><p>Often, if you are working on a team, you will have conflicts when you rebase your branch from <code>master</code>. This is fine–do not panic–it just means that another person updated the same code you did and merged it in before you. What will happen then is the rebase will stop in the middle and you will have to manually fix the conflicts. If you type in <code>git status</code> it will show you which files have conflicts, you can simply open them and see which changes you made that are in conflict with the changes on master (which will be denoted with <code>&lt;&lt;&lt;&lt;&lt;&lt;</code> and <code>========</code>), then add or delete the code necessary to incorporate both changes in the code (if necessary). Once you are done fixing the conflicts (this includes deleting the <code>&lt;&lt;&lt;&lt;</code> and <code>====</code> mark up), go back to the command line and type <code>git add .</code> then <code>git rebase --continue</code> to continue along your path to having a happy (git) tree.</p>\n<p>It is for this reason that if I am working on a feature branch, I rebase it after almost every commit, just to make sure I am kept up to date with <code>master</code>. I don’t like fixing conflicts, and this ensures that I have as few of them as possible at one time.</p>\n<h4 id=\"Now-a-bit-more-about-GitHub-and-rebasing\"><a href=\"#Now-a-bit-more-about-GitHub-and-rebasing\" class=\"headerlink\" title=\"Now, a bit more about GitHub and rebasing\"></a>Now, a bit more about GitHub and rebasing</h4><p>If you are like me, you use GitHub to store your code, and you use pull requests on GitHub to have someone review your code (you are having someone review your code, <a href=\"http://www.intridea.com/blog/2014/8/12/on-code-cleanliness-and-readability\" target=\"_blank\" rel=\"noopener\">right?</a>). In order to take advantage of GitHub <em>and</em> <code>git rebase</code> you will need to rebase your branches before you make a pull request, otherwise you could end up with a spaghetti like tree as shown above.</p>\n"},{"title":"Improvements to BigVimbox.com","date":"2015-09-29T13:10:00.000Z","_content":"\nJust wanted to give an update on some improvements I recently made to [bigvimbox.com](http://bigvimbox.com):\n\n- Updated to the latest [Ace editor](https://github.com/ajaxorg/ace)\n- Switched to markdown mode by default instead of text mode. This provides small improvements in the color scheme to show where the markup would be\n- Added a handler for the `:w` vim command: This will save the contents of your bigvimbox to local storage so that if you close the tab or your browser restarts you won't lose your notes.\n\nSince I do my regular development in Vim, it's second nature for me to always hit `:w` when I'm done editing something. The problem was in bigvimbox.com, I would hit that and nothing would happen; it felt very unfulfilling, so I \"scratched my own itch\" so to say.\n","source":"_posts/Improvements-to-BigVimbox-com.md","raw":"---\ntitle: Improvements to BigVimbox.com\ndate: 2015-09-29 09:10:00\ntags:\n---\n\nJust wanted to give an update on some improvements I recently made to [bigvimbox.com](http://bigvimbox.com):\n\n- Updated to the latest [Ace editor](https://github.com/ajaxorg/ace)\n- Switched to markdown mode by default instead of text mode. This provides small improvements in the color scheme to show where the markup would be\n- Added a handler for the `:w` vim command: This will save the contents of your bigvimbox to local storage so that if you close the tab or your browser restarts you won't lose your notes.\n\nSince I do my regular development in Vim, it's second nature for me to always hit `:w` when I'm done editing something. The problem was in bigvimbox.com, I would hit that and nothing would happen; it felt very unfulfilling, so I \"scratched my own itch\" so to say.\n","slug":"Improvements-to-BigVimbox-com","published":1,"updated":"2018-05-03T12:36:12.668Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck98hdtsj00022uml0t3aae1v","content":"<p>Just wanted to give an update on some improvements I recently made to <a href=\"http://bigvimbox.com\" target=\"_blank\" rel=\"noopener\">bigvimbox.com</a>:</p>\n<ul>\n<li>Updated to the latest <a href=\"https://github.com/ajaxorg/ace\" target=\"_blank\" rel=\"noopener\">Ace editor</a></li>\n<li>Switched to markdown mode by default instead of text mode. This provides small improvements in the color scheme to show where the markup would be</li>\n<li>Added a handler for the <code>:w</code> vim command: This will save the contents of your bigvimbox to local storage so that if you close the tab or your browser restarts you won’t lose your notes.</li>\n</ul>\n<p>Since I do my regular development in Vim, it’s second nature for me to always hit <code>:w</code> when I’m done editing something. The problem was in bigvimbox.com, I would hit that and nothing would happen; it felt very unfulfilling, so I “scratched my own itch” so to say.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Just wanted to give an update on some improvements I recently made to <a href=\"http://bigvimbox.com\" target=\"_blank\" rel=\"noopener\">bigvimbox.com</a>:</p>\n<ul>\n<li>Updated to the latest <a href=\"https://github.com/ajaxorg/ace\" target=\"_blank\" rel=\"noopener\">Ace editor</a></li>\n<li>Switched to markdown mode by default instead of text mode. This provides small improvements in the color scheme to show where the markup would be</li>\n<li>Added a handler for the <code>:w</code> vim command: This will save the contents of your bigvimbox to local storage so that if you close the tab or your browser restarts you won’t lose your notes.</li>\n</ul>\n<p>Since I do my regular development in Vim, it’s second nature for me to always hit <code>:w</code> when I’m done editing something. The problem was in bigvimbox.com, I would hit that and nothing would happen; it felt very unfulfilling, so I “scratched my own itch” so to say.</p>\n"},{"title":"Ruby on Rails polymorphic user model with devise authentication","date":"2014-06-26T13:17:35.000Z","_content":"\nWhen modeling my application I have two types of users that have a polymorphic association to the user model. Such as:\n\n```ruby\nclass User < ActiveRecord::Base\n    belongs_to :profileable, :polymorphic => true\nend\n\nclass User_Type_1 < ActiveRecord::Base\n    has_one :user, :as => :profileable\nend\n\nclass User_Type_2 < ActiveRecord::Base\n    has_one :user, :as => :profileable\nend\n```\n\nThe reason I did this, instead of an STI, is because `User_Type_1` has something like 4 fields and `User_Type_2` has something like 20 fields and I didn’t want the user table to have so many fields (yes 24-ish fields is not a lot but I’d rather not have ~20 fields empty most of the time)\n\nThe problem I was facing at this point was I want the sign up form to only be used to sign up users of type `User_Type_1` but the sign in form to be used to both. (I will have an admin side of the application which will create users of `User_Type_2`)\n\nI knew I can use the `after_sign_in_path_for(resource)` override in `AppicationController` somehow to redirect to the right part of the site on sign in. Something like:\n\n```ruby\ndef after_sign_in_path_for(resource)\n    case current_user.profileable_type\n    when \"UserType1\"\n        return user_type_1_index_path\n    when \"UserType2\"\n        return user_type_1_index_path\n    end\nend\n```\n\nTo achieve what I wanted here I just created a normal form for the `User_Type_1` with nested attributes for `User` and had it post to the `UserType1Controller`:\n\n```ruby\n= form_for :user_type_1 do |f|\n  = f.label :first_name\n  = f.text_field :first_name\n  = f.label :last_name\n  = f.text_field :last_name\n  = f.label :phone_number\n  = f.text_field :phone_number\n  = fields_for :user do |user_fields|\n    = user_fields.label :email\n    = user_fields.email_field :email\n    = user_fields.label :password\n    = user_fields.password_field :password\n    = user_fields.label :password_confirmation\n    = user_fields.password_field :password_confirmation\n  = f.submit\n```\n\nThen saved both objects and called the `sign_in_and_redirect` helper from Devise\n\n```ruby\nclass UserType1Controller < ApplicationController\n    ...\n    def create\n        @user = User.new(params[:user])\n        @user_type_1 = UserType1.new(params[:patron])\n        @user.profileable = @user_type_1\n        @user_type_1.save\n        @user.save\n        sign_in_and_redirect @user\n    end\n    ...\n end\n``` \n\nThen the `after_sign_in_path_for` method from above sent it to the right place and it was all good.\n","source":"_posts/Ruby-on-Rails-polymorphic-user-model-with-devise-authentication.md","raw":"---\ntitle: Ruby on Rails polymorphic user model with devise authentication\ndate: 2014-06-26 09:17:35\ntags:\n---\n\nWhen modeling my application I have two types of users that have a polymorphic association to the user model. Such as:\n\n```ruby\nclass User < ActiveRecord::Base\n    belongs_to :profileable, :polymorphic => true\nend\n\nclass User_Type_1 < ActiveRecord::Base\n    has_one :user, :as => :profileable\nend\n\nclass User_Type_2 < ActiveRecord::Base\n    has_one :user, :as => :profileable\nend\n```\n\nThe reason I did this, instead of an STI, is because `User_Type_1` has something like 4 fields and `User_Type_2` has something like 20 fields and I didn’t want the user table to have so many fields (yes 24-ish fields is not a lot but I’d rather not have ~20 fields empty most of the time)\n\nThe problem I was facing at this point was I want the sign up form to only be used to sign up users of type `User_Type_1` but the sign in form to be used to both. (I will have an admin side of the application which will create users of `User_Type_2`)\n\nI knew I can use the `after_sign_in_path_for(resource)` override in `AppicationController` somehow to redirect to the right part of the site on sign in. Something like:\n\n```ruby\ndef after_sign_in_path_for(resource)\n    case current_user.profileable_type\n    when \"UserType1\"\n        return user_type_1_index_path\n    when \"UserType2\"\n        return user_type_1_index_path\n    end\nend\n```\n\nTo achieve what I wanted here I just created a normal form for the `User_Type_1` with nested attributes for `User` and had it post to the `UserType1Controller`:\n\n```ruby\n= form_for :user_type_1 do |f|\n  = f.label :first_name\n  = f.text_field :first_name\n  = f.label :last_name\n  = f.text_field :last_name\n  = f.label :phone_number\n  = f.text_field :phone_number\n  = fields_for :user do |user_fields|\n    = user_fields.label :email\n    = user_fields.email_field :email\n    = user_fields.label :password\n    = user_fields.password_field :password\n    = user_fields.label :password_confirmation\n    = user_fields.password_field :password_confirmation\n  = f.submit\n```\n\nThen saved both objects and called the `sign_in_and_redirect` helper from Devise\n\n```ruby\nclass UserType1Controller < ApplicationController\n    ...\n    def create\n        @user = User.new(params[:user])\n        @user_type_1 = UserType1.new(params[:patron])\n        @user.profileable = @user_type_1\n        @user_type_1.save\n        @user.save\n        sign_in_and_redirect @user\n    end\n    ...\n end\n``` \n\nThen the `after_sign_in_path_for` method from above sent it to the right place and it was all good.\n","slug":"Ruby-on-Rails-polymorphic-user-model-with-devise-authentication","published":1,"updated":"2018-05-03T12:36:12.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck98hdtsl00032uml1kogh7uy","content":"<p>When modeling my application I have two types of users that have a polymorphic association to the user model. Such as:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> &lt; ActiveRecord::Base</span></span><br><span class=\"line\">    belongs_to <span class=\"symbol\">:profileable</span>, <span class=\"symbol\">:polymorphic</span> =&gt; <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User_Type_1</span> &lt; ActiveRecord::Base</span></span><br><span class=\"line\">    has_one <span class=\"symbol\">:user</span>, <span class=\"symbol\">:as</span> =&gt; <span class=\"symbol\">:profileable</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User_Type_2</span> &lt; ActiveRecord::Base</span></span><br><span class=\"line\">    has_one <span class=\"symbol\">:user</span>, <span class=\"symbol\">:as</span> =&gt; <span class=\"symbol\">:profileable</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>The reason I did this, instead of an STI, is because <code>User_Type_1</code> has something like 4 fields and <code>User_Type_2</code> has something like 20 fields and I didn’t want the user table to have so many fields (yes 24-ish fields is not a lot but I’d rather not have ~20 fields empty most of the time)</p>\n<p>The problem I was facing at this point was I want the sign up form to only be used to sign up users of type <code>User_Type_1</code> but the sign in form to be used to both. (I will have an admin side of the application which will create users of <code>User_Type_2</code>)</p>\n<p>I knew I can use the <code>after_sign_in_path_for(resource)</code> override in <code>AppicationController</code> somehow to redirect to the right part of the site on sign in. Something like:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">after_sign_in_path_for</span><span class=\"params\">(resource)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> current_user.profileable_type</span><br><span class=\"line\">    <span class=\"keyword\">when</span> <span class=\"string\">\"UserType1\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> user_type_1_index_path</span><br><span class=\"line\">    <span class=\"keyword\">when</span> <span class=\"string\">\"UserType2\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> user_type_1_index_path</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>To achieve what I wanted here I just created a normal form for the <code>User_Type_1</code> with nested attributes for <code>User</code> and had it post to the <code>UserType1Controller</code>:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">= form_for <span class=\"symbol\">:user_type_1</span> <span class=\"keyword\">do</span> <span class=\"params\">|f|</span></span><br><span class=\"line\">  = f.label <span class=\"symbol\">:first_name</span></span><br><span class=\"line\">  = f.text_field <span class=\"symbol\">:first_name</span></span><br><span class=\"line\">  = f.label <span class=\"symbol\">:last_name</span></span><br><span class=\"line\">  = f.text_field <span class=\"symbol\">:last_name</span></span><br><span class=\"line\">  = f.label <span class=\"symbol\">:phone_number</span></span><br><span class=\"line\">  = f.text_field <span class=\"symbol\">:phone_number</span></span><br><span class=\"line\">  = fields_for <span class=\"symbol\">:user</span> <span class=\"keyword\">do</span> <span class=\"params\">|user_fields|</span></span><br><span class=\"line\">    = user_fields.label <span class=\"symbol\">:email</span></span><br><span class=\"line\">    = user_fields.email_field <span class=\"symbol\">:email</span></span><br><span class=\"line\">    = user_fields.label <span class=\"symbol\">:password</span></span><br><span class=\"line\">    = user_fields.password_field <span class=\"symbol\">:password</span></span><br><span class=\"line\">    = user_fields.label <span class=\"symbol\">:password_confirmation</span></span><br><span class=\"line\">    = user_fields.password_field <span class=\"symbol\">:password_confirmation</span></span><br><span class=\"line\">  = f.submit</span><br></pre></td></tr></table></figure>\n<p>Then saved both objects and called the <code>sign_in_and_redirect</code> helper from Devise</p>\n<pre><code class=\"ruby\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserType1Controller</span> &lt; ApplicationController</span>\n    ...\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span></span>\n        @user = User.new(params[<span class=\"symbol\">:user</span>])\n        @user_type_1 = UserType1.new(params[<span class=\"symbol\">:patron</span>])\n        @user.profileable = @user_type_1\n        @user_type_1.save\n        @user.save\n        sign_in_and_redirect @user\n    <span class=\"keyword\">end</span>\n    ...\n <span class=\"keyword\">end</span>\n</code></pre>\n<p>Then the <code>after_sign_in_path_for</code> method from above sent it to the right place and it was all good.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>When modeling my application I have two types of users that have a polymorphic association to the user model. Such as:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> &lt; ActiveRecord::Base</span></span><br><span class=\"line\">    belongs_to <span class=\"symbol\">:profileable</span>, <span class=\"symbol\">:polymorphic</span> =&gt; <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User_Type_1</span> &lt; ActiveRecord::Base</span></span><br><span class=\"line\">    has_one <span class=\"symbol\">:user</span>, <span class=\"symbol\">:as</span> =&gt; <span class=\"symbol\">:profileable</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User_Type_2</span> &lt; ActiveRecord::Base</span></span><br><span class=\"line\">    has_one <span class=\"symbol\">:user</span>, <span class=\"symbol\">:as</span> =&gt; <span class=\"symbol\">:profileable</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>The reason I did this, instead of an STI, is because <code>User_Type_1</code> has something like 4 fields and <code>User_Type_2</code> has something like 20 fields and I didn’t want the user table to have so many fields (yes 24-ish fields is not a lot but I’d rather not have ~20 fields empty most of the time)</p>\n<p>The problem I was facing at this point was I want the sign up form to only be used to sign up users of type <code>User_Type_1</code> but the sign in form to be used to both. (I will have an admin side of the application which will create users of <code>User_Type_2</code>)</p>\n<p>I knew I can use the <code>after_sign_in_path_for(resource)</code> override in <code>AppicationController</code> somehow to redirect to the right part of the site on sign in. Something like:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">after_sign_in_path_for</span><span class=\"params\">(resource)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> current_user.profileable_type</span><br><span class=\"line\">    <span class=\"keyword\">when</span> <span class=\"string\">\"UserType1\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> user_type_1_index_path</span><br><span class=\"line\">    <span class=\"keyword\">when</span> <span class=\"string\">\"UserType2\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> user_type_1_index_path</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>To achieve what I wanted here I just created a normal form for the <code>User_Type_1</code> with nested attributes for <code>User</code> and had it post to the <code>UserType1Controller</code>:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">= form_for <span class=\"symbol\">:user_type_1</span> <span class=\"keyword\">do</span> <span class=\"params\">|f|</span></span><br><span class=\"line\">  = f.label <span class=\"symbol\">:first_name</span></span><br><span class=\"line\">  = f.text_field <span class=\"symbol\">:first_name</span></span><br><span class=\"line\">  = f.label <span class=\"symbol\">:last_name</span></span><br><span class=\"line\">  = f.text_field <span class=\"symbol\">:last_name</span></span><br><span class=\"line\">  = f.label <span class=\"symbol\">:phone_number</span></span><br><span class=\"line\">  = f.text_field <span class=\"symbol\">:phone_number</span></span><br><span class=\"line\">  = fields_for <span class=\"symbol\">:user</span> <span class=\"keyword\">do</span> <span class=\"params\">|user_fields|</span></span><br><span class=\"line\">    = user_fields.label <span class=\"symbol\">:email</span></span><br><span class=\"line\">    = user_fields.email_field <span class=\"symbol\">:email</span></span><br><span class=\"line\">    = user_fields.label <span class=\"symbol\">:password</span></span><br><span class=\"line\">    = user_fields.password_field <span class=\"symbol\">:password</span></span><br><span class=\"line\">    = user_fields.label <span class=\"symbol\">:password_confirmation</span></span><br><span class=\"line\">    = user_fields.password_field <span class=\"symbol\">:password_confirmation</span></span><br><span class=\"line\">  = f.submit</span><br></pre></td></tr></table></figure>\n<p>Then saved both objects and called the <code>sign_in_and_redirect</code> helper from Devise</p>\n<pre><code class=\"ruby\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserType1Controller</span> &lt; ApplicationController</span>\n    ...\n    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span></span>\n        @user = User.new(params[<span class=\"symbol\">:user</span>])\n        @user_type_1 = UserType1.new(params[<span class=\"symbol\">:patron</span>])\n        @user.profileable = @user_type_1\n        @user_type_1.save\n        @user.save\n        sign_in_and_redirect @user\n    <span class=\"keyword\">end</span>\n    ...\n <span class=\"keyword\">end</span>\n</code></pre>\n<p>Then the <code>after_sign_in_path_for</code> method from above sent it to the right place and it was all good.</p>\n"},{"title":"Homemade Glazed Donuts","date":"2020-04-20T12:52:53.000Z","_content":"\n# Donut Recipe\n\n![2440BFBF-6159-4673-8584-45396C7ECB8E_1_105_c](https://user-images.githubusercontent.com/248182/79752829-e5edad00-82e2-11ea-9f23-2d4dd859babf.jpeg)\n\n\n## Ingredients\n\n### Dough\n- 1 cup milk\n- 1/4 cup plus 1 tsp. granulated sugar, divided\n- 1 packet (or 2 1/4 tsp.) active dry yeast\n- 4 cups all-purpose flour\n- 1/2 tsp kosher salt\n- 6 tbsp melted butter\n- 2 large eggs\n- 1/2 tsp pure vanilla extract\n- Canola or vegetable oil, for frying\n\n### Glaze\n- 1/4 cup milk\n- 2 cup powdered sugar\n- 1/2 tsp pure vanilla extract\n\n\n## Directions\n\n1. In a small, microwave-safe container, add the 1 cup milk. Microwave until lukewarm, about 40 seconds. Add the divided 1 tsp of sugar and stir to dissolve, then sprinkle over yeast and let sit until frothy, about 8 minutes.\n2. In a medium bowl, whisk together the 4 cups flour and 1/2 tsp salt.\n3. In a large bowl, whisk together remaining 1/4 cup sugar, 6 tbsp butter, 2 eggs, and 1/2 tsp vanilla with a wooden spoon.\n4. Pour in yeast mixture, mix to combine, then add in dry ingredients (flour and salt). stirring with a wooden spoon until a shaggy dough forms.\n5. Transfer to a lightly floured surface and knead until elastic and only slightly tacky, adding more flour a teaspoon at a time if needed, about 5 minutes.\n6. Form into a tight ball then place dough in a greased bowl and cover with a clean dish towel.\n7. Let dough rise in a warm spot in your kitchen until doubled in size, about 1 hour.\n8. Line a large baking sheet with parchment. Punch down dough, then turn onto a lightly floured work surface and roll out into a ½ inch thick rectangle.\n9. Using a doughnut cutter (or 3 inch and 1 inch biscuit cutters), punch out your doughnuts.\n10. Re-knead scraps together and punch out as well.\n11. Place doughnuts and holes onto baking sheets, cover with dish towel, and let rise again, about 40 minutes more.\n\n### While waiting for the 2nd rise, you can make the glaze\n\n1. In a large bowl, whisk together milk, powdered sugar, and vanilla until smooth. Set aside.\n\n### Fry donuts\n\n1. Line a large baking sheet with paper towels.\n2. In a large dutch oven over medium heat, heat 2 inches of oil to 350°F.\n3. Cook doughnuts, in batches, until deeply golden on both sides, about 1 minute per side. (Holes will cook even faster!)\n4. Transfer doughnuts to paper towel-lined baking sheet to drain and cool slightly. Dip into glaze, then place onto a cooling rack (or eat immediately!)\n","source":"_posts/donut-recipe.md","raw":"---\ntitle: Homemade Glazed Donuts\ndate: 2020-04-20 08:52:53\ntags:\n---\n\n# Donut Recipe\n\n![2440BFBF-6159-4673-8584-45396C7ECB8E_1_105_c](https://user-images.githubusercontent.com/248182/79752829-e5edad00-82e2-11ea-9f23-2d4dd859babf.jpeg)\n\n\n## Ingredients\n\n### Dough\n- 1 cup milk\n- 1/4 cup plus 1 tsp. granulated sugar, divided\n- 1 packet (or 2 1/4 tsp.) active dry yeast\n- 4 cups all-purpose flour\n- 1/2 tsp kosher salt\n- 6 tbsp melted butter\n- 2 large eggs\n- 1/2 tsp pure vanilla extract\n- Canola or vegetable oil, for frying\n\n### Glaze\n- 1/4 cup milk\n- 2 cup powdered sugar\n- 1/2 tsp pure vanilla extract\n\n\n## Directions\n\n1. In a small, microwave-safe container, add the 1 cup milk. Microwave until lukewarm, about 40 seconds. Add the divided 1 tsp of sugar and stir to dissolve, then sprinkle over yeast and let sit until frothy, about 8 minutes.\n2. In a medium bowl, whisk together the 4 cups flour and 1/2 tsp salt.\n3. In a large bowl, whisk together remaining 1/4 cup sugar, 6 tbsp butter, 2 eggs, and 1/2 tsp vanilla with a wooden spoon.\n4. Pour in yeast mixture, mix to combine, then add in dry ingredients (flour and salt). stirring with a wooden spoon until a shaggy dough forms.\n5. Transfer to a lightly floured surface and knead until elastic and only slightly tacky, adding more flour a teaspoon at a time if needed, about 5 minutes.\n6. Form into a tight ball then place dough in a greased bowl and cover with a clean dish towel.\n7. Let dough rise in a warm spot in your kitchen until doubled in size, about 1 hour.\n8. Line a large baking sheet with parchment. Punch down dough, then turn onto a lightly floured work surface and roll out into a ½ inch thick rectangle.\n9. Using a doughnut cutter (or 3 inch and 1 inch biscuit cutters), punch out your doughnuts.\n10. Re-knead scraps together and punch out as well.\n11. Place doughnuts and holes onto baking sheets, cover with dish towel, and let rise again, about 40 minutes more.\n\n### While waiting for the 2nd rise, you can make the glaze\n\n1. In a large bowl, whisk together milk, powdered sugar, and vanilla until smooth. Set aside.\n\n### Fry donuts\n\n1. Line a large baking sheet with paper towels.\n2. In a large dutch oven over medium heat, heat 2 inches of oil to 350°F.\n3. Cook doughnuts, in batches, until deeply golden on both sides, about 1 minute per side. (Holes will cook even faster!)\n4. Transfer doughnuts to paper towel-lined baking sheet to drain and cool slightly. Dip into glaze, then place onto a cooling rack (or eat immediately!)\n","slug":"donut-recipe","published":1,"updated":"2020-04-20T12:55:47.853Z","_id":"ck98hdtsn00042uml0zogxq5u","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Donut-Recipe\"><a href=\"#Donut-Recipe\" class=\"headerlink\" title=\"Donut Recipe\"></a>Donut Recipe</h1><p><img src=\"https://user-images.githubusercontent.com/248182/79752829-e5edad00-82e2-11ea-9f23-2d4dd859babf.jpeg\" alt=\"2440BFBF-6159-4673-8584-45396C7ECB8E_1_105_c\"></p>\n<h2 id=\"Ingredients\"><a href=\"#Ingredients\" class=\"headerlink\" title=\"Ingredients\"></a>Ingredients</h2><h3 id=\"Dough\"><a href=\"#Dough\" class=\"headerlink\" title=\"Dough\"></a>Dough</h3><ul>\n<li>1 cup milk</li>\n<li>1/4 cup plus 1 tsp. granulated sugar, divided</li>\n<li>1 packet (or 2 1/4 tsp.) active dry yeast</li>\n<li>4 cups all-purpose flour</li>\n<li>1/2 tsp kosher salt</li>\n<li>6 tbsp melted butter</li>\n<li>2 large eggs</li>\n<li>1/2 tsp pure vanilla extract</li>\n<li>Canola or vegetable oil, for frying</li>\n</ul>\n<h3 id=\"Glaze\"><a href=\"#Glaze\" class=\"headerlink\" title=\"Glaze\"></a>Glaze</h3><ul>\n<li>1/4 cup milk</li>\n<li>2 cup powdered sugar</li>\n<li>1/2 tsp pure vanilla extract</li>\n</ul>\n<h2 id=\"Directions\"><a href=\"#Directions\" class=\"headerlink\" title=\"Directions\"></a>Directions</h2><ol>\n<li>In a small, microwave-safe container, add the 1 cup milk. Microwave until lukewarm, about 40 seconds. Add the divided 1 tsp of sugar and stir to dissolve, then sprinkle over yeast and let sit until frothy, about 8 minutes.</li>\n<li>In a medium bowl, whisk together the 4 cups flour and 1/2 tsp salt.</li>\n<li>In a large bowl, whisk together remaining 1/4 cup sugar, 6 tbsp butter, 2 eggs, and 1/2 tsp vanilla with a wooden spoon.</li>\n<li>Pour in yeast mixture, mix to combine, then add in dry ingredients (flour and salt). stirring with a wooden spoon until a shaggy dough forms.</li>\n<li>Transfer to a lightly floured surface and knead until elastic and only slightly tacky, adding more flour a teaspoon at a time if needed, about 5 minutes.</li>\n<li>Form into a tight ball then place dough in a greased bowl and cover with a clean dish towel.</li>\n<li>Let dough rise in a warm spot in your kitchen until doubled in size, about 1 hour.</li>\n<li>Line a large baking sheet with parchment. Punch down dough, then turn onto a lightly floured work surface and roll out into a ½ inch thick rectangle.</li>\n<li>Using a doughnut cutter (or 3 inch and 1 inch biscuit cutters), punch out your doughnuts.</li>\n<li>Re-knead scraps together and punch out as well.</li>\n<li>Place doughnuts and holes onto baking sheets, cover with dish towel, and let rise again, about 40 minutes more.</li>\n</ol>\n<h3 id=\"While-waiting-for-the-2nd-rise-you-can-make-the-glaze\"><a href=\"#While-waiting-for-the-2nd-rise-you-can-make-the-glaze\" class=\"headerlink\" title=\"While waiting for the 2nd rise, you can make the glaze\"></a>While waiting for the 2nd rise, you can make the glaze</h3><ol>\n<li>In a large bowl, whisk together milk, powdered sugar, and vanilla until smooth. Set aside.</li>\n</ol>\n<h3 id=\"Fry-donuts\"><a href=\"#Fry-donuts\" class=\"headerlink\" title=\"Fry donuts\"></a>Fry donuts</h3><ol>\n<li>Line a large baking sheet with paper towels.</li>\n<li>In a large dutch oven over medium heat, heat 2 inches of oil to 350°F.</li>\n<li>Cook doughnuts, in batches, until deeply golden on both sides, about 1 minute per side. (Holes will cook even faster!)</li>\n<li>Transfer doughnuts to paper towel-lined baking sheet to drain and cool slightly. Dip into glaze, then place onto a cooling rack (or eat immediately!)</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Donut-Recipe\"><a href=\"#Donut-Recipe\" class=\"headerlink\" title=\"Donut Recipe\"></a>Donut Recipe</h1><p><img src=\"https://user-images.githubusercontent.com/248182/79752829-e5edad00-82e2-11ea-9f23-2d4dd859babf.jpeg\" alt=\"2440BFBF-6159-4673-8584-45396C7ECB8E_1_105_c\"></p>\n<h2 id=\"Ingredients\"><a href=\"#Ingredients\" class=\"headerlink\" title=\"Ingredients\"></a>Ingredients</h2><h3 id=\"Dough\"><a href=\"#Dough\" class=\"headerlink\" title=\"Dough\"></a>Dough</h3><ul>\n<li>1 cup milk</li>\n<li>1/4 cup plus 1 tsp. granulated sugar, divided</li>\n<li>1 packet (or 2 1/4 tsp.) active dry yeast</li>\n<li>4 cups all-purpose flour</li>\n<li>1/2 tsp kosher salt</li>\n<li>6 tbsp melted butter</li>\n<li>2 large eggs</li>\n<li>1/2 tsp pure vanilla extract</li>\n<li>Canola or vegetable oil, for frying</li>\n</ul>\n<h3 id=\"Glaze\"><a href=\"#Glaze\" class=\"headerlink\" title=\"Glaze\"></a>Glaze</h3><ul>\n<li>1/4 cup milk</li>\n<li>2 cup powdered sugar</li>\n<li>1/2 tsp pure vanilla extract</li>\n</ul>\n<h2 id=\"Directions\"><a href=\"#Directions\" class=\"headerlink\" title=\"Directions\"></a>Directions</h2><ol>\n<li>In a small, microwave-safe container, add the 1 cup milk. Microwave until lukewarm, about 40 seconds. Add the divided 1 tsp of sugar and stir to dissolve, then sprinkle over yeast and let sit until frothy, about 8 minutes.</li>\n<li>In a medium bowl, whisk together the 4 cups flour and 1/2 tsp salt.</li>\n<li>In a large bowl, whisk together remaining 1/4 cup sugar, 6 tbsp butter, 2 eggs, and 1/2 tsp vanilla with a wooden spoon.</li>\n<li>Pour in yeast mixture, mix to combine, then add in dry ingredients (flour and salt). stirring with a wooden spoon until a shaggy dough forms.</li>\n<li>Transfer to a lightly floured surface and knead until elastic and only slightly tacky, adding more flour a teaspoon at a time if needed, about 5 minutes.</li>\n<li>Form into a tight ball then place dough in a greased bowl and cover with a clean dish towel.</li>\n<li>Let dough rise in a warm spot in your kitchen until doubled in size, about 1 hour.</li>\n<li>Line a large baking sheet with parchment. Punch down dough, then turn onto a lightly floured work surface and roll out into a ½ inch thick rectangle.</li>\n<li>Using a doughnut cutter (or 3 inch and 1 inch biscuit cutters), punch out your doughnuts.</li>\n<li>Re-knead scraps together and punch out as well.</li>\n<li>Place doughnuts and holes onto baking sheets, cover with dish towel, and let rise again, about 40 minutes more.</li>\n</ol>\n<h3 id=\"While-waiting-for-the-2nd-rise-you-can-make-the-glaze\"><a href=\"#While-waiting-for-the-2nd-rise-you-can-make-the-glaze\" class=\"headerlink\" title=\"While waiting for the 2nd rise, you can make the glaze\"></a>While waiting for the 2nd rise, you can make the glaze</h3><ol>\n<li>In a large bowl, whisk together milk, powdered sugar, and vanilla until smooth. Set aside.</li>\n</ol>\n<h3 id=\"Fry-donuts\"><a href=\"#Fry-donuts\" class=\"headerlink\" title=\"Fry donuts\"></a>Fry donuts</h3><ol>\n<li>Line a large baking sheet with paper towels.</li>\n<li>In a large dutch oven over medium heat, heat 2 inches of oil to 350°F.</li>\n<li>Cook doughnuts, in batches, until deeply golden on both sides, about 1 minute per side. (Holes will cook even faster!)</li>\n<li>Transfer doughnuts to paper towel-lined baking sheet to drain and cool slightly. Dip into glaze, then place onto a cooling rack (or eat immediately!)</li>\n</ol>\n"},{"title":"Running Heroku shell commands from a Rake task","date":"2014-06-27T13:17:35.000Z","_content":"\nRunning an app on Heroku has many benefits, most of which I will not go into here.\n\nI was trying to make a rake task to pull down my latest backup from the [pgbackups Heroku addon](https://addons.heroku.com/pgbackups), as well as restore it locally.\n\nMy rake task looked something like this:\n\n``` ruby\nnamespace :db do\n  desc \"Fetch the latest backup from heroku\"\n  task :fetch => [:environment] do\n    app = \"<YOU PRODUCTION APP HERE>\"\n    url = `heroku pgbackups:url -a #{app}`\n    db_prefix = app.gsub('-','_')\n    fname = \"#{db_prefix}_#{Time.now.strftime(\"%Y%m%d\")}.postgres\"\n    puts \"curl -o #{fname} '#{url}'\"\n    `curl -o #{fname} \"#{url}\"`\n  end\n\n  desc \"Import a dbfile into the development database on the local system\"\n  task :import => [:environment] do\n    dbfile = ENV['dbfile']\n    if dbfile.blank? || !File.exists?(dbfile)\n      puts \"You need to specify the database file to import with dbfile=<filename>\"\n    else\n      `pg_restore --verbose --clean --no-acl --no-owner -h localhost -d <YOUR LOCAL DB HERE> #{dbfile}`\n    end\n  end\n\n  desc \"Sanitize user data\"\n  task :sanitize_user_data => [:environment] do\n    User.all.each do |u|\n      u.email = \"#{u.email}.fake\"\n      u.password = 'password'\n      u.password_confirmation = 'password'\n      u.save\n    end\n  end\nend\n```\n\nHowever, whenever I ran it I kept getting errors like\n\n``` bash\nGemfile syntax error: (Bundler::GemfileError)\nGemfile:6: syntax error, unexpected ':', expecting $end\ngem 'activeadmin', github: 'gregbell/active_admin', branch: 'rails4'\n                          ^\n```\nI could NOT figure out what was happening. I stumbled upon [an issue on the Heroku github page](https://github.com/heroku/heroku/issues/617) in which it is suggested to wrap the calls in `Bundler.with_clean_env` block\n\nThe change was to make the fetch task look like this:\n\n``` ruby\n  desc \"Fetch the latest backup from heroku\"\n  task :fetch => [:environment] do\n    Bundler.with_clean_env do\n      app = \"<YOU PRODUCTION APP HERE>\"\n      url = `heroku pgbackups:url -a #{app}`\n      db_prefix = app.gsub('-','_')\n      fname = \"#{db_prefix}_#{Time.now.strftime(\"%Y%m%d\")}.postgres\"\n      puts \"curl -o #{fname} '#{url}'\"\n      `curl -o #{fname} \"#{url}\"`\n    end\n  end\n```\n\nAll is well now and I can backup my files successfully from Heroku.\n","source":"_posts/Running-Heroku-shell-commands-from-a-Rake-task.md","raw":"---\ntitle: Running Heroku shell commands from a Rake task\ndate: 2014-06-27 09:17:35\ntags:\n---\n\nRunning an app on Heroku has many benefits, most of which I will not go into here.\n\nI was trying to make a rake task to pull down my latest backup from the [pgbackups Heroku addon](https://addons.heroku.com/pgbackups), as well as restore it locally.\n\nMy rake task looked something like this:\n\n``` ruby\nnamespace :db do\n  desc \"Fetch the latest backup from heroku\"\n  task :fetch => [:environment] do\n    app = \"<YOU PRODUCTION APP HERE>\"\n    url = `heroku pgbackups:url -a #{app}`\n    db_prefix = app.gsub('-','_')\n    fname = \"#{db_prefix}_#{Time.now.strftime(\"%Y%m%d\")}.postgres\"\n    puts \"curl -o #{fname} '#{url}'\"\n    `curl -o #{fname} \"#{url}\"`\n  end\n\n  desc \"Import a dbfile into the development database on the local system\"\n  task :import => [:environment] do\n    dbfile = ENV['dbfile']\n    if dbfile.blank? || !File.exists?(dbfile)\n      puts \"You need to specify the database file to import with dbfile=<filename>\"\n    else\n      `pg_restore --verbose --clean --no-acl --no-owner -h localhost -d <YOUR LOCAL DB HERE> #{dbfile}`\n    end\n  end\n\n  desc \"Sanitize user data\"\n  task :sanitize_user_data => [:environment] do\n    User.all.each do |u|\n      u.email = \"#{u.email}.fake\"\n      u.password = 'password'\n      u.password_confirmation = 'password'\n      u.save\n    end\n  end\nend\n```\n\nHowever, whenever I ran it I kept getting errors like\n\n``` bash\nGemfile syntax error: (Bundler::GemfileError)\nGemfile:6: syntax error, unexpected ':', expecting $end\ngem 'activeadmin', github: 'gregbell/active_admin', branch: 'rails4'\n                          ^\n```\nI could NOT figure out what was happening. I stumbled upon [an issue on the Heroku github page](https://github.com/heroku/heroku/issues/617) in which it is suggested to wrap the calls in `Bundler.with_clean_env` block\n\nThe change was to make the fetch task look like this:\n\n``` ruby\n  desc \"Fetch the latest backup from heroku\"\n  task :fetch => [:environment] do\n    Bundler.with_clean_env do\n      app = \"<YOU PRODUCTION APP HERE>\"\n      url = `heroku pgbackups:url -a #{app}`\n      db_prefix = app.gsub('-','_')\n      fname = \"#{db_prefix}_#{Time.now.strftime(\"%Y%m%d\")}.postgres\"\n      puts \"curl -o #{fname} '#{url}'\"\n      `curl -o #{fname} \"#{url}\"`\n    end\n  end\n```\n\nAll is well now and I can backup my files successfully from Heroku.\n","slug":"Running-Heroku-shell-commands-from-a-Rake-task","published":1,"updated":"2018-05-03T12:36:12.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck98hdtsp00052umlh42f8ie9","content":"<p>Running an app on Heroku has many benefits, most of which I will not go into here.</p>\n<p>I was trying to make a rake task to pull down my latest backup from the <a href=\"https://addons.heroku.com/pgbackups\" target=\"_blank\" rel=\"noopener\">pgbackups Heroku addon</a>, as well as restore it locally.</p>\n<p>My rake task looked something like this:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace <span class=\"symbol\">:db</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  desc <span class=\"string\">\"Fetch the latest backup from heroku\"</span></span><br><span class=\"line\">  task <span class=\"symbol\">:fetch</span> =&gt; [<span class=\"symbol\">:environment</span>] <span class=\"keyword\">do</span></span><br><span class=\"line\">    app = <span class=\"string\">\"&lt;YOU PRODUCTION APP HERE&gt;\"</span></span><br><span class=\"line\">    url = <span class=\"string\">`heroku pgbackups:url -a <span class=\"subst\">#&#123;app&#125;</span>`</span></span><br><span class=\"line\">    db_prefix = app.gsub(<span class=\"string\">'-'</span>,<span class=\"string\">'_'</span>)</span><br><span class=\"line\">    fname = <span class=\"string\">\"<span class=\"subst\">#&#123;db_prefix&#125;</span>_<span class=\"subst\">#&#123;Time.now.strftime(<span class=\"string\">\"%Y%m%d\"</span>)&#125;</span>.postgres\"</span></span><br><span class=\"line\">    puts <span class=\"string\">\"curl -o <span class=\"subst\">#&#123;fname&#125;</span> '<span class=\"subst\">#&#123;url&#125;</span>'\"</span></span><br><span class=\"line\">    <span class=\"string\">`curl -o <span class=\"subst\">#&#123;fname&#125;</span> \"<span class=\"subst\">#&#123;url&#125;</span>\"`</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  desc <span class=\"string\">\"Import a dbfile into the development database on the local system\"</span></span><br><span class=\"line\">  task <span class=\"symbol\">:import</span> =&gt; [<span class=\"symbol\">:environment</span>] <span class=\"keyword\">do</span></span><br><span class=\"line\">    dbfile = ENV[<span class=\"string\">'dbfile'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> dbfile.blank? <span class=\"params\">||</span> !File.exists?(dbfile)</span><br><span class=\"line\">      puts <span class=\"string\">\"You need to specify the database file to import with dbfile=&lt;filename&gt;\"</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      <span class=\"string\">`pg_restore --verbose --clean --no-acl --no-owner -h localhost -d &lt;YOUR LOCAL DB HERE&gt; <span class=\"subst\">#&#123;dbfile&#125;</span>`</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  desc <span class=\"string\">\"Sanitize user data\"</span></span><br><span class=\"line\">  task <span class=\"symbol\">:sanitize_user_data</span> =&gt; [<span class=\"symbol\">:environment</span>] <span class=\"keyword\">do</span></span><br><span class=\"line\">    User.all.each <span class=\"keyword\">do</span> <span class=\"params\">|u|</span></span><br><span class=\"line\">      u.email = <span class=\"string\">\"<span class=\"subst\">#&#123;u.email&#125;</span>.fake\"</span></span><br><span class=\"line\">      u.password = <span class=\"string\">'password'</span></span><br><span class=\"line\">      u.password_confirmation = <span class=\"string\">'password'</span></span><br><span class=\"line\">      u.save</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>However, whenever I ran it I kept getting errors like</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Gemfile syntax error: (Bundler::GemfileError)</span><br><span class=\"line\">Gemfile:6: syntax error, unexpected <span class=\"string\">':'</span>, expecting <span class=\"variable\">$end</span></span><br><span class=\"line\">gem <span class=\"string\">'activeadmin'</span>, github: <span class=\"string\">'gregbell/active_admin'</span>, branch: <span class=\"string\">'rails4'</span></span><br><span class=\"line\">                          ^</span><br></pre></td></tr></table></figure>\n<p>I could NOT figure out what was happening. I stumbled upon <a href=\"https://github.com/heroku/heroku/issues/617\" target=\"_blank\" rel=\"noopener\">an issue on the Heroku github page</a> in which it is suggested to wrap the calls in <code>Bundler.with_clean_env</code> block</p>\n<p>The change was to make the fetch task look like this:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">desc <span class=\"string\">\"Fetch the latest backup from heroku\"</span></span><br><span class=\"line\">task <span class=\"symbol\">:fetch</span> =&gt; [<span class=\"symbol\">:environment</span>] <span class=\"keyword\">do</span></span><br><span class=\"line\">  Bundler.with_clean_env <span class=\"keyword\">do</span></span><br><span class=\"line\">    app = <span class=\"string\">\"&lt;YOU PRODUCTION APP HERE&gt;\"</span></span><br><span class=\"line\">    url = <span class=\"string\">`heroku pgbackups:url -a <span class=\"subst\">#&#123;app&#125;</span>`</span></span><br><span class=\"line\">    db_prefix = app.gsub(<span class=\"string\">'-'</span>,<span class=\"string\">'_'</span>)</span><br><span class=\"line\">    fname = <span class=\"string\">\"<span class=\"subst\">#&#123;db_prefix&#125;</span>_<span class=\"subst\">#&#123;Time.now.strftime(<span class=\"string\">\"%Y%m%d\"</span>)&#125;</span>.postgres\"</span></span><br><span class=\"line\">    puts <span class=\"string\">\"curl -o <span class=\"subst\">#&#123;fname&#125;</span> '<span class=\"subst\">#&#123;url&#125;</span>'\"</span></span><br><span class=\"line\">    <span class=\"string\">`curl -o <span class=\"subst\">#&#123;fname&#125;</span> \"<span class=\"subst\">#&#123;url&#125;</span>\"`</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>All is well now and I can backup my files successfully from Heroku.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Running an app on Heroku has many benefits, most of which I will not go into here.</p>\n<p>I was trying to make a rake task to pull down my latest backup from the <a href=\"https://addons.heroku.com/pgbackups\" target=\"_blank\" rel=\"noopener\">pgbackups Heroku addon</a>, as well as restore it locally.</p>\n<p>My rake task looked something like this:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace <span class=\"symbol\">:db</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  desc <span class=\"string\">\"Fetch the latest backup from heroku\"</span></span><br><span class=\"line\">  task <span class=\"symbol\">:fetch</span> =&gt; [<span class=\"symbol\">:environment</span>] <span class=\"keyword\">do</span></span><br><span class=\"line\">    app = <span class=\"string\">\"&lt;YOU PRODUCTION APP HERE&gt;\"</span></span><br><span class=\"line\">    url = <span class=\"string\">`heroku pgbackups:url -a <span class=\"subst\">#&#123;app&#125;</span>`</span></span><br><span class=\"line\">    db_prefix = app.gsub(<span class=\"string\">'-'</span>,<span class=\"string\">'_'</span>)</span><br><span class=\"line\">    fname = <span class=\"string\">\"<span class=\"subst\">#&#123;db_prefix&#125;</span>_<span class=\"subst\">#&#123;Time.now.strftime(<span class=\"string\">\"%Y%m%d\"</span>)&#125;</span>.postgres\"</span></span><br><span class=\"line\">    puts <span class=\"string\">\"curl -o <span class=\"subst\">#&#123;fname&#125;</span> '<span class=\"subst\">#&#123;url&#125;</span>'\"</span></span><br><span class=\"line\">    <span class=\"string\">`curl -o <span class=\"subst\">#&#123;fname&#125;</span> \"<span class=\"subst\">#&#123;url&#125;</span>\"`</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  desc <span class=\"string\">\"Import a dbfile into the development database on the local system\"</span></span><br><span class=\"line\">  task <span class=\"symbol\">:import</span> =&gt; [<span class=\"symbol\">:environment</span>] <span class=\"keyword\">do</span></span><br><span class=\"line\">    dbfile = ENV[<span class=\"string\">'dbfile'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> dbfile.blank? <span class=\"params\">||</span> !File.exists?(dbfile)</span><br><span class=\"line\">      puts <span class=\"string\">\"You need to specify the database file to import with dbfile=&lt;filename&gt;\"</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      <span class=\"string\">`pg_restore --verbose --clean --no-acl --no-owner -h localhost -d &lt;YOUR LOCAL DB HERE&gt; <span class=\"subst\">#&#123;dbfile&#125;</span>`</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  desc <span class=\"string\">\"Sanitize user data\"</span></span><br><span class=\"line\">  task <span class=\"symbol\">:sanitize_user_data</span> =&gt; [<span class=\"symbol\">:environment</span>] <span class=\"keyword\">do</span></span><br><span class=\"line\">    User.all.each <span class=\"keyword\">do</span> <span class=\"params\">|u|</span></span><br><span class=\"line\">      u.email = <span class=\"string\">\"<span class=\"subst\">#&#123;u.email&#125;</span>.fake\"</span></span><br><span class=\"line\">      u.password = <span class=\"string\">'password'</span></span><br><span class=\"line\">      u.password_confirmation = <span class=\"string\">'password'</span></span><br><span class=\"line\">      u.save</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>However, whenever I ran it I kept getting errors like</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Gemfile syntax error: (Bundler::GemfileError)</span><br><span class=\"line\">Gemfile:6: syntax error, unexpected <span class=\"string\">':'</span>, expecting <span class=\"variable\">$end</span></span><br><span class=\"line\">gem <span class=\"string\">'activeadmin'</span>, github: <span class=\"string\">'gregbell/active_admin'</span>, branch: <span class=\"string\">'rails4'</span></span><br><span class=\"line\">                          ^</span><br></pre></td></tr></table></figure>\n<p>I could NOT figure out what was happening. I stumbled upon <a href=\"https://github.com/heroku/heroku/issues/617\" target=\"_blank\" rel=\"noopener\">an issue on the Heroku github page</a> in which it is suggested to wrap the calls in <code>Bundler.with_clean_env</code> block</p>\n<p>The change was to make the fetch task look like this:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">desc <span class=\"string\">\"Fetch the latest backup from heroku\"</span></span><br><span class=\"line\">task <span class=\"symbol\">:fetch</span> =&gt; [<span class=\"symbol\">:environment</span>] <span class=\"keyword\">do</span></span><br><span class=\"line\">  Bundler.with_clean_env <span class=\"keyword\">do</span></span><br><span class=\"line\">    app = <span class=\"string\">\"&lt;YOU PRODUCTION APP HERE&gt;\"</span></span><br><span class=\"line\">    url = <span class=\"string\">`heroku pgbackups:url -a <span class=\"subst\">#&#123;app&#125;</span>`</span></span><br><span class=\"line\">    db_prefix = app.gsub(<span class=\"string\">'-'</span>,<span class=\"string\">'_'</span>)</span><br><span class=\"line\">    fname = <span class=\"string\">\"<span class=\"subst\">#&#123;db_prefix&#125;</span>_<span class=\"subst\">#&#123;Time.now.strftime(<span class=\"string\">\"%Y%m%d\"</span>)&#125;</span>.postgres\"</span></span><br><span class=\"line\">    puts <span class=\"string\">\"curl -o <span class=\"subst\">#&#123;fname&#125;</span> '<span class=\"subst\">#&#123;url&#125;</span>'\"</span></span><br><span class=\"line\">    <span class=\"string\">`curl -o <span class=\"subst\">#&#123;fname&#125;</span> \"<span class=\"subst\">#&#123;url&#125;</span>\"`</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>All is well now and I can backup my files successfully from Heroku.</p>\n"},{"title":"On Code Cleanliness and Readability","date":"2014-10-09T13:15:50.000Z","_content":"_ Originally published at [www.intridea.com](http://www.intridea.com/blog/2014/8/12/on-code-cleanliness-and-readability)_\n\n> Programs must be written for people to read, and only incidentally for machines to execute. \n> — Abelson / Sussman\n\n\nI like my code so clean you could eat off of it (if you could eat off of code). When working on a codebase I’m ruthless about deleting unused code, unnecessary comments, debugging statements, etc. Yes, it may be painstakingly detailed, but this is all a benefit to my future self, my coworkers and anyone who reviews my code in the future.\n\nWhen doing a code review of a pull request, I make notes of all the places where code could be cleaner; I also expect the same to be done for me. If I’m pairing, I make sure we do code reviews of every line of a commit before making the commit. I run a tight ship, and I appreciate when my coworkers do the same.\n\nIt’s just common sense; a clean codebase, free of cruft, is easier to read and understand. A codebase that is easy to read and understand is easier to debug, extend, and modify. Ultimately, a clean codebase makes for happy developers.\n\n## What is “clean” code? \nCode that is “clean” is code that is written to be read and understood with relative ease. You could say this is code written with the reader in mind. Every person and every organization has their own definition for what exactly clean code is, so I won’t be giving explicit examples. What is important is to find some common ground on a project and all stick to it.\n\nEvery developer has heard the old saying that goes something like “Always code as if the person maintaining it is a maniac serial killer and knows where you live”. With respect to that, clean code is code that keeps you safe.\n\n## Rules for organization \nEveryone in an organization has their own rules for how code should be organized. It doesn’t matter all that much what these rules are, so long as everyone in the organization can agree on some set of rules and everyone follows them.\n\nIf you do not have some rules I suggest listening to the ruby rogues podcast episode in which Sandi Metz discussed some rules for keeping code clean (full transcript here).\n\nThey are:\n\n- Your class can be no longer than 100 lines of code.\n- Your methods can be no longer than five lines of code.\n- You can pass no more than four parameters and you can’t just make it one big hash.\n- Your controller (in a Rails app, when a call comes into your controller) can only instantiate one object to do whatever it is that needs to be done.\n\nNote that these rules are not really *rules* but more like guidelines. They are there to guide you when you don’t know where to begin with writing clean code; they are there if you have no rules; they are there as a conversation starter within your organization.\n\nTo quote Charles Max Wood from the Ruby Rogues episode regarding the rules:\n\n> So, one thing that really strikes me with these rules is that for the most part, if you really try, you should be able to follow them. [If you say] “Oh well, I’m sure I can find an instance that breaks this rule.” The whole point is when you break the rule, you should be able to explain exactly why you need to break the rule. In that way, then you can justify what you’re doing. But otherwise, you’re not forced to think about what you’re coding and that’s really what the issue is.\n>\n\n## Style Guide \nA style guide goes hand in hand with code rules, such as those defined above. A style guide, however, covers a much greater set of situations. I think the guidelines defined in a style guide are just as important. If everyone codes using their own style (say 4 space or hard tabs instead of 2 space tabs) on a project, it makes the cognitive overhead that much greater from file to file. If I have a standard style that I know the code will conform to, it makes it that much easier to scan the code and figure out what is going on.\n\n### Ruby style guide \nAt Intridea, we have a Ruby style guide that we follow to make sure that the code we write all follows the same convention. (you can find it at Ruby Style Guide). This is a non-confrontational way to let your developers know there is a standard for the way their code should look when they are writing it, you are reviewing it, or you are both writing it via pairing.\n\n### Rspec style guide \nIt is not only important to keep your ruby and rails code adhering to a consistent style, but also it is important that everyone write their specs in a consistent way. I suggest using a resource like betterspecs.org as a starting point for a conversation about how you want tests to be written.\n\nIf you want to differ from what is proposed on that page, it is open source on github here. So you can fork it for your organization and make any changes you would like.\n\n## Humbleness and code reviews \nThe best way to fight against spaghetti code, or a big ball of mud, is to have someone review your code, whether through pair programming or an explicit code review (a git pull request being most common these days).\n\nIt’s important to remember, don’t take comments personally, criticisms of code are not criticisms of the person. Critiques of code logic or style should be looked at as a moment in which you can grow as a developer. You may not agree with the examination of your code, but it will at least spark a conversation in which case all parties can see each others viewpoints and come to a consensus of what the end result should be.\n\nOn more than one occasion I have come across a piece of code that I thought could have been a bit cleaner, or refactored differently, and thought “oh man, I get to correct someone!” Only to then check the author through git blame, and realize it was written by me. My point is that no one is perfect and change isn’t going to happen overnight; it takes time and deliberate effort. You should look at comments regarding code organization or style not as an attack, but as an effort to make the end result better for everyone.\n","source":"_posts/On-Code-Cleanliness-and-Readability.md","raw":"---\ntitle: On Code Cleanliness and Readability\ndate: 2014-10-09 09:15:50\ntags:\n---\n_ Originally published at [www.intridea.com](http://www.intridea.com/blog/2014/8/12/on-code-cleanliness-and-readability)_\n\n> Programs must be written for people to read, and only incidentally for machines to execute. \n> — Abelson / Sussman\n\n\nI like my code so clean you could eat off of it (if you could eat off of code). When working on a codebase I’m ruthless about deleting unused code, unnecessary comments, debugging statements, etc. Yes, it may be painstakingly detailed, but this is all a benefit to my future self, my coworkers and anyone who reviews my code in the future.\n\nWhen doing a code review of a pull request, I make notes of all the places where code could be cleaner; I also expect the same to be done for me. If I’m pairing, I make sure we do code reviews of every line of a commit before making the commit. I run a tight ship, and I appreciate when my coworkers do the same.\n\nIt’s just common sense; a clean codebase, free of cruft, is easier to read and understand. A codebase that is easy to read and understand is easier to debug, extend, and modify. Ultimately, a clean codebase makes for happy developers.\n\n## What is “clean” code? \nCode that is “clean” is code that is written to be read and understood with relative ease. You could say this is code written with the reader in mind. Every person and every organization has their own definition for what exactly clean code is, so I won’t be giving explicit examples. What is important is to find some common ground on a project and all stick to it.\n\nEvery developer has heard the old saying that goes something like “Always code as if the person maintaining it is a maniac serial killer and knows where you live”. With respect to that, clean code is code that keeps you safe.\n\n## Rules for organization \nEveryone in an organization has their own rules for how code should be organized. It doesn’t matter all that much what these rules are, so long as everyone in the organization can agree on some set of rules and everyone follows them.\n\nIf you do not have some rules I suggest listening to the ruby rogues podcast episode in which Sandi Metz discussed some rules for keeping code clean (full transcript here).\n\nThey are:\n\n- Your class can be no longer than 100 lines of code.\n- Your methods can be no longer than five lines of code.\n- You can pass no more than four parameters and you can’t just make it one big hash.\n- Your controller (in a Rails app, when a call comes into your controller) can only instantiate one object to do whatever it is that needs to be done.\n\nNote that these rules are not really *rules* but more like guidelines. They are there to guide you when you don’t know where to begin with writing clean code; they are there if you have no rules; they are there as a conversation starter within your organization.\n\nTo quote Charles Max Wood from the Ruby Rogues episode regarding the rules:\n\n> So, one thing that really strikes me with these rules is that for the most part, if you really try, you should be able to follow them. [If you say] “Oh well, I’m sure I can find an instance that breaks this rule.” The whole point is when you break the rule, you should be able to explain exactly why you need to break the rule. In that way, then you can justify what you’re doing. But otherwise, you’re not forced to think about what you’re coding and that’s really what the issue is.\n>\n\n## Style Guide \nA style guide goes hand in hand with code rules, such as those defined above. A style guide, however, covers a much greater set of situations. I think the guidelines defined in a style guide are just as important. If everyone codes using their own style (say 4 space or hard tabs instead of 2 space tabs) on a project, it makes the cognitive overhead that much greater from file to file. If I have a standard style that I know the code will conform to, it makes it that much easier to scan the code and figure out what is going on.\n\n### Ruby style guide \nAt Intridea, we have a Ruby style guide that we follow to make sure that the code we write all follows the same convention. (you can find it at Ruby Style Guide). This is a non-confrontational way to let your developers know there is a standard for the way their code should look when they are writing it, you are reviewing it, or you are both writing it via pairing.\n\n### Rspec style guide \nIt is not only important to keep your ruby and rails code adhering to a consistent style, but also it is important that everyone write their specs in a consistent way. I suggest using a resource like betterspecs.org as a starting point for a conversation about how you want tests to be written.\n\nIf you want to differ from what is proposed on that page, it is open source on github here. So you can fork it for your organization and make any changes you would like.\n\n## Humbleness and code reviews \nThe best way to fight against spaghetti code, or a big ball of mud, is to have someone review your code, whether through pair programming or an explicit code review (a git pull request being most common these days).\n\nIt’s important to remember, don’t take comments personally, criticisms of code are not criticisms of the person. Critiques of code logic or style should be looked at as a moment in which you can grow as a developer. You may not agree with the examination of your code, but it will at least spark a conversation in which case all parties can see each others viewpoints and come to a consensus of what the end result should be.\n\nOn more than one occasion I have come across a piece of code that I thought could have been a bit cleaner, or refactored differently, and thought “oh man, I get to correct someone!” Only to then check the author through git blame, and realize it was written by me. My point is that no one is perfect and change isn’t going to happen overnight; it takes time and deliberate effort. You should look at comments regarding code organization or style not as an attack, but as an effort to make the end result better for everyone.\n","slug":"On-Code-Cleanliness-and-Readability","published":1,"updated":"2018-05-03T12:36:12.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck98hdtsq00062umlx44xy90n","content":"<p>_ Originally published at <a href=\"http://www.intridea.com/blog/2014/8/12/on-code-cleanliness-and-readability\" target=\"_blank\" rel=\"noopener\">www.intridea.com</a>_</p>\n<blockquote>\n<p>Programs must be written for people to read, and only incidentally for machines to execute. <br>— Abelson / Sussman</p>\n</blockquote>\n<p>I like my code so clean you could eat off of it (if you could eat off of code). When working on a codebase I’m ruthless about deleting unused code, unnecessary comments, debugging statements, etc. Yes, it may be painstakingly detailed, but this is all a benefit to my future self, my coworkers and anyone who reviews my code in the future.</p>\n<p>When doing a code review of a pull request, I make notes of all the places where code could be cleaner; I also expect the same to be done for me. If I’m pairing, I make sure we do code reviews of every line of a commit before making the commit. I run a tight ship, and I appreciate when my coworkers do the same.</p>\n<p>It’s just common sense; a clean codebase, free of cruft, is easier to read and understand. A codebase that is easy to read and understand is easier to debug, extend, and modify. Ultimately, a clean codebase makes for happy developers.</p>\n<h2 id=\"What-is-“clean”-code\"><a href=\"#What-is-“clean”-code\" class=\"headerlink\" title=\"What is “clean” code?\"></a>What is “clean” code?</h2><p>Code that is “clean” is code that is written to be read and understood with relative ease. You could say this is code written with the reader in mind. Every person and every organization has their own definition for what exactly clean code is, so I won’t be giving explicit examples. What is important is to find some common ground on a project and all stick to it.</p>\n<p>Every developer has heard the old saying that goes something like “Always code as if the person maintaining it is a maniac serial killer and knows where you live”. With respect to that, clean code is code that keeps you safe.</p>\n<h2 id=\"Rules-for-organization\"><a href=\"#Rules-for-organization\" class=\"headerlink\" title=\"Rules for organization\"></a>Rules for organization</h2><p>Everyone in an organization has their own rules for how code should be organized. It doesn’t matter all that much what these rules are, so long as everyone in the organization can agree on some set of rules and everyone follows them.</p>\n<p>If you do not have some rules I suggest listening to the ruby rogues podcast episode in which Sandi Metz discussed some rules for keeping code clean (full transcript here).</p>\n<p>They are:</p>\n<ul>\n<li>Your class can be no longer than 100 lines of code.</li>\n<li>Your methods can be no longer than five lines of code.</li>\n<li>You can pass no more than four parameters and you can’t just make it one big hash.</li>\n<li>Your controller (in a Rails app, when a call comes into your controller) can only instantiate one object to do whatever it is that needs to be done.</li>\n</ul>\n<p>Note that these rules are not really <em>rules</em> but more like guidelines. They are there to guide you when you don’t know where to begin with writing clean code; they are there if you have no rules; they are there as a conversation starter within your organization.</p>\n<p>To quote Charles Max Wood from the Ruby Rogues episode regarding the rules:</p>\n<blockquote>\n<p>So, one thing that really strikes me with these rules is that for the most part, if you really try, you should be able to follow them. [If you say] “Oh well, I’m sure I can find an instance that breaks this rule.” The whole point is when you break the rule, you should be able to explain exactly why you need to break the rule. In that way, then you can justify what you’re doing. But otherwise, you’re not forced to think about what you’re coding and that’s really what the issue is.</p>\n</blockquote>\n<h2 id=\"Style-Guide\"><a href=\"#Style-Guide\" class=\"headerlink\" title=\"Style Guide\"></a>Style Guide</h2><p>A style guide goes hand in hand with code rules, such as those defined above. A style guide, however, covers a much greater set of situations. I think the guidelines defined in a style guide are just as important. If everyone codes using their own style (say 4 space or hard tabs instead of 2 space tabs) on a project, it makes the cognitive overhead that much greater from file to file. If I have a standard style that I know the code will conform to, it makes it that much easier to scan the code and figure out what is going on.</p>\n<h3 id=\"Ruby-style-guide\"><a href=\"#Ruby-style-guide\" class=\"headerlink\" title=\"Ruby style guide\"></a>Ruby style guide</h3><p>At Intridea, we have a Ruby style guide that we follow to make sure that the code we write all follows the same convention. (you can find it at Ruby Style Guide). This is a non-confrontational way to let your developers know there is a standard for the way their code should look when they are writing it, you are reviewing it, or you are both writing it via pairing.</p>\n<h3 id=\"Rspec-style-guide\"><a href=\"#Rspec-style-guide\" class=\"headerlink\" title=\"Rspec style guide\"></a>Rspec style guide</h3><p>It is not only important to keep your ruby and rails code adhering to a consistent style, but also it is important that everyone write their specs in a consistent way. I suggest using a resource like betterspecs.org as a starting point for a conversation about how you want tests to be written.</p>\n<p>If you want to differ from what is proposed on that page, it is open source on github here. So you can fork it for your organization and make any changes you would like.</p>\n<h2 id=\"Humbleness-and-code-reviews\"><a href=\"#Humbleness-and-code-reviews\" class=\"headerlink\" title=\"Humbleness and code reviews\"></a>Humbleness and code reviews</h2><p>The best way to fight against spaghetti code, or a big ball of mud, is to have someone review your code, whether through pair programming or an explicit code review (a git pull request being most common these days).</p>\n<p>It’s important to remember, don’t take comments personally, criticisms of code are not criticisms of the person. Critiques of code logic or style should be looked at as a moment in which you can grow as a developer. You may not agree with the examination of your code, but it will at least spark a conversation in which case all parties can see each others viewpoints and come to a consensus of what the end result should be.</p>\n<p>On more than one occasion I have come across a piece of code that I thought could have been a bit cleaner, or refactored differently, and thought “oh man, I get to correct someone!” Only to then check the author through git blame, and realize it was written by me. My point is that no one is perfect and change isn’t going to happen overnight; it takes time and deliberate effort. You should look at comments regarding code organization or style not as an attack, but as an effort to make the end result better for everyone.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>_ Originally published at <a href=\"http://www.intridea.com/blog/2014/8/12/on-code-cleanliness-and-readability\" target=\"_blank\" rel=\"noopener\">www.intridea.com</a>_</p>\n<blockquote>\n<p>Programs must be written for people to read, and only incidentally for machines to execute. <br>— Abelson / Sussman</p>\n</blockquote>\n<p>I like my code so clean you could eat off of it (if you could eat off of code). When working on a codebase I’m ruthless about deleting unused code, unnecessary comments, debugging statements, etc. Yes, it may be painstakingly detailed, but this is all a benefit to my future self, my coworkers and anyone who reviews my code in the future.</p>\n<p>When doing a code review of a pull request, I make notes of all the places where code could be cleaner; I also expect the same to be done for me. If I’m pairing, I make sure we do code reviews of every line of a commit before making the commit. I run a tight ship, and I appreciate when my coworkers do the same.</p>\n<p>It’s just common sense; a clean codebase, free of cruft, is easier to read and understand. A codebase that is easy to read and understand is easier to debug, extend, and modify. Ultimately, a clean codebase makes for happy developers.</p>\n<h2 id=\"What-is-“clean”-code\"><a href=\"#What-is-“clean”-code\" class=\"headerlink\" title=\"What is “clean” code?\"></a>What is “clean” code?</h2><p>Code that is “clean” is code that is written to be read and understood with relative ease. You could say this is code written with the reader in mind. Every person and every organization has their own definition for what exactly clean code is, so I won’t be giving explicit examples. What is important is to find some common ground on a project and all stick to it.</p>\n<p>Every developer has heard the old saying that goes something like “Always code as if the person maintaining it is a maniac serial killer and knows where you live”. With respect to that, clean code is code that keeps you safe.</p>\n<h2 id=\"Rules-for-organization\"><a href=\"#Rules-for-organization\" class=\"headerlink\" title=\"Rules for organization\"></a>Rules for organization</h2><p>Everyone in an organization has their own rules for how code should be organized. It doesn’t matter all that much what these rules are, so long as everyone in the organization can agree on some set of rules and everyone follows them.</p>\n<p>If you do not have some rules I suggest listening to the ruby rogues podcast episode in which Sandi Metz discussed some rules for keeping code clean (full transcript here).</p>\n<p>They are:</p>\n<ul>\n<li>Your class can be no longer than 100 lines of code.</li>\n<li>Your methods can be no longer than five lines of code.</li>\n<li>You can pass no more than four parameters and you can’t just make it one big hash.</li>\n<li>Your controller (in a Rails app, when a call comes into your controller) can only instantiate one object to do whatever it is that needs to be done.</li>\n</ul>\n<p>Note that these rules are not really <em>rules</em> but more like guidelines. They are there to guide you when you don’t know where to begin with writing clean code; they are there if you have no rules; they are there as a conversation starter within your organization.</p>\n<p>To quote Charles Max Wood from the Ruby Rogues episode regarding the rules:</p>\n<blockquote>\n<p>So, one thing that really strikes me with these rules is that for the most part, if you really try, you should be able to follow them. [If you say] “Oh well, I’m sure I can find an instance that breaks this rule.” The whole point is when you break the rule, you should be able to explain exactly why you need to break the rule. In that way, then you can justify what you’re doing. But otherwise, you’re not forced to think about what you’re coding and that’s really what the issue is.</p>\n</blockquote>\n<h2 id=\"Style-Guide\"><a href=\"#Style-Guide\" class=\"headerlink\" title=\"Style Guide\"></a>Style Guide</h2><p>A style guide goes hand in hand with code rules, such as those defined above. A style guide, however, covers a much greater set of situations. I think the guidelines defined in a style guide are just as important. If everyone codes using their own style (say 4 space or hard tabs instead of 2 space tabs) on a project, it makes the cognitive overhead that much greater from file to file. If I have a standard style that I know the code will conform to, it makes it that much easier to scan the code and figure out what is going on.</p>\n<h3 id=\"Ruby-style-guide\"><a href=\"#Ruby-style-guide\" class=\"headerlink\" title=\"Ruby style guide\"></a>Ruby style guide</h3><p>At Intridea, we have a Ruby style guide that we follow to make sure that the code we write all follows the same convention. (you can find it at Ruby Style Guide). This is a non-confrontational way to let your developers know there is a standard for the way their code should look when they are writing it, you are reviewing it, or you are both writing it via pairing.</p>\n<h3 id=\"Rspec-style-guide\"><a href=\"#Rspec-style-guide\" class=\"headerlink\" title=\"Rspec style guide\"></a>Rspec style guide</h3><p>It is not only important to keep your ruby and rails code adhering to a consistent style, but also it is important that everyone write their specs in a consistent way. I suggest using a resource like betterspecs.org as a starting point for a conversation about how you want tests to be written.</p>\n<p>If you want to differ from what is proposed on that page, it is open source on github here. So you can fork it for your organization and make any changes you would like.</p>\n<h2 id=\"Humbleness-and-code-reviews\"><a href=\"#Humbleness-and-code-reviews\" class=\"headerlink\" title=\"Humbleness and code reviews\"></a>Humbleness and code reviews</h2><p>The best way to fight against spaghetti code, or a big ball of mud, is to have someone review your code, whether through pair programming or an explicit code review (a git pull request being most common these days).</p>\n<p>It’s important to remember, don’t take comments personally, criticisms of code are not criticisms of the person. Critiques of code logic or style should be looked at as a moment in which you can grow as a developer. You may not agree with the examination of your code, but it will at least spark a conversation in which case all parties can see each others viewpoints and come to a consensus of what the end result should be.</p>\n<p>On more than one occasion I have come across a piece of code that I thought could have been a bit cleaner, or refactored differently, and thought “oh man, I get to correct someone!” Only to then check the author through git blame, and realize it was written by me. My point is that no one is perfect and change isn’t going to happen overnight; it takes time and deliberate effort. You should look at comments regarding code organization or style not as an attack, but as an effort to make the end result better for everyone.</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}